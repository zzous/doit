{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js!/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/pagination-nav/pagination-nav.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/pagination-nav/pagination-nav.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js","mtime":1582363962038},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubGluayI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgppbXBvcnQgeyBWdWUgfSBmcm9tICcuLi8uLi92dWUnOwppbXBvcnQgeyBOQU1FX1BBR0lOQVRJT05fTkFWIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2NvbXBvbmVudHMnOwppbXBvcnQgeyBJU19CUk9XU0VSIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2Vudic7CmltcG9ydCB7IEVWRU5UX05BTUVfQ0hBTkdFLCBFVkVOVF9OQU1FX1BBR0VfQ0xJQ0sgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZXZlbnRzJzsKaW1wb3J0IHsgUFJPUF9UWVBFX0FSUkFZLCBQUk9QX1RZUEVfQk9PTEVBTiwgUFJPUF9UWVBFX0ZVTkNUSU9OLCBQUk9QX1RZUEVfTlVNQkVSX1NUUklORywgUFJPUF9UWVBFX1NUUklORyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wcm9wcyc7CmltcG9ydCB7IEJ2RXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9idi1ldmVudC5jbGFzcyc7CmltcG9ydCB7IGF0dGVtcHRCbHVyLCByZXF1ZXN0QUYgfSBmcm9tICcuLi8uLi91dGlscy9kb20nOwppbXBvcnQgeyBpc0FycmF5LCBpc1VuZGVmaW5lZCwgaXNPYmplY3QgfSBmcm9tICcuLi8uLi91dGlscy9pbnNwZWN0JzsKaW1wb3J0IHsgbG9vc2VFcXVhbCB9IGZyb20gJy4uLy4uL3V0aWxzL2xvb3NlLWVxdWFsJzsKaW1wb3J0IHsgbWF0aE1heCB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGgnOwppbXBvcnQgeyB0b0ludGVnZXIgfSBmcm9tICcuLi8uLi91dGlscy9udW1iZXInOwppbXBvcnQgeyBvbWl0LCBzb3J0S2V5cyB9IGZyb20gJy4uLy4uL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IGhhc1Byb3BGdW5jdGlvbiwgbWFrZVByb3AsIG1ha2VQcm9wc0NvbmZpZ3VyYWJsZSwgcGx1Y2tQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3Byb3BzJzsKaW1wb3J0IHsgY29tcHV0ZUhyZWYsIHBhcnNlUXVlcnkgfSBmcm9tICcuLi8uLi91dGlscy9yb3V0ZXInOwppbXBvcnQgeyB0b1N0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3N0cmluZyc7CmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi91dGlscy93YXJuJzsKaW1wb3J0IHsgcGFnaW5hdGlvbk1peGluLCBwcm9wcyBhcyBwYWdpbmF0aW9uUHJvcHMgfSBmcm9tICcuLi8uLi9taXhpbnMvcGFnaW5hdGlvbic7CmltcG9ydCB7IHByb3BzIGFzIEJMaW5rUHJvcHMgfSBmcm9tICcuLi9saW5rL2xpbmsnOyAvLyAtLS0gSGVscGVyIG1ldGhvZHMgLS0tCi8vIFNhbml0aXplIHRoZSBwcm92aWRlZCBudW1iZXIgb2YgcGFnZXMgKGNvbnZlcnRpbmcgdG8gYSBudW1iZXIpCgpleHBvcnQgdmFyIHNhbml0aXplTnVtYmVyT2ZQYWdlcyA9IGZ1bmN0aW9uIHNhbml0aXplTnVtYmVyT2ZQYWdlcyh2YWx1ZSkgewogIHJldHVybiBtYXRoTWF4KHRvSW50ZWdlcih2YWx1ZSwgMCksIDEpOwp9OyAvLyAtLS0gUHJvcHMgLS0tCgp2YXIgX2xpbmtQcm9wcyA9IG9taXQoQkxpbmtQcm9wcywgWydldmVudCcsICdyb3V0ZXJUYWcnXSk7Cgp2YXIgcHJvcHMgPSBtYWtlUHJvcHNDb25maWd1cmFibGUoc29ydEtleXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBhZ2luYXRpb25Qcm9wcyksIF9saW5rUHJvcHMpLCB7fSwgewogIGJhc2VVcmw6IG1ha2VQcm9wKFBST1BfVFlQRV9TVFJJTkcsICcvJyksCiAgbGlua0dlbjogbWFrZVByb3AoUFJPUF9UWVBFX0ZVTkNUSU9OKSwKICAvLyBEaXNhYmxlIGF1dG8gcGFnZSBudW1iZXIgZGV0ZWN0aW9uIGlmIGB0cnVlYAogIG5vUGFnZURldGVjdDogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICBudW1iZXJPZlBhZ2VzOiBtYWtlUHJvcChQUk9QX1RZUEVfTlVNQkVSX1NUUklORywgMSwKICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgdmFyIG51bWJlciA9IHRvSW50ZWdlcih2YWx1ZSwgMCk7CgogICAgaWYgKG51bWJlciA8IDEpIHsKICAgICAgd2FybignUHJvcCAibnVtYmVyLW9mLXBhZ2VzIiBtdXN0IGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAiMCInLCBOQU1FX1BBR0lOQVRJT05fTkFWKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwogIH0pLAogIHBhZ2VHZW46IG1ha2VQcm9wKFBST1BfVFlQRV9GVU5DVElPTiksCiAgLy8gT3B0aW9uYWwgYXJyYXkgb2YgcGFnZSBsaW5rcwogIHBhZ2VzOiBtYWtlUHJvcChQUk9QX1RZUEVfQVJSQVkpLAogIHVzZVJvdXRlcjogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKQp9KSksIE5BTUVfUEFHSU5BVElPTl9OQVYpOyAvLyAtLS0gTWFpbiBjb21wb25lbnQgLS0tCi8vIEB2dWUvY29tcG9uZW50CgpleHBvcnQgdmFyIEJQYWdpbmF0aW9uTmF2ID0gLyojX19QVVJFX18qL1Z1ZS5leHRlbmQoewogIG5hbWU6IE5BTUVfUEFHSU5BVElPTl9OQVYsCiAgLy8gVGhlIHJlbmRlciBmdW5jdGlvbiBpcyBicm91Z2h0IGluIHZpYSB0aGUgcGFnaW5hdGlvbiBtaXhpbgogIG1peGluczogW3BhZ2luYXRpb25NaXhpbl0sCiAgcHJvcHM6IHByb3BzLAogIGNvbXB1dGVkOiB7CiAgICAvLyBVc2VkIGJ5IHJlbmRlciBmdW5jdGlvbiB0byB0cmlnZ2VyIHdyYXBwaW5nIGluICc8bmF2PicgZWxlbWVudAogICAgaXNOYXY6IGZ1bmN0aW9uIGlzTmF2KCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sCiAgICBjb21wdXRlZFZhbHVlOiBmdW5jdGlvbiBjb21wdXRlZFZhbHVlKCkgewogICAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBwcm9wIGFzIGEgbnVtYmVyIG9yIGBudWxsYCBpZiB1bmRlZmluZWQgb3IgPCAxCiAgICAgIHZhciB2YWx1ZSA9IHRvSW50ZWdlcih0aGlzLnZhbHVlLCAwKTsKICAgICAgcmV0dXJuIHZhbHVlIDwgMSA/IG51bGwgOiB2YWx1ZTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBudW1iZXJPZlBhZ2VzOiBmdW5jdGlvbiBudW1iZXJPZlBhZ2VzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnNldE51bWJlck9mUGFnZXMoKTsKICAgICAgfSk7CiAgICB9LAogICAgcGFnZXM6IGZ1bmN0aW9uIHBhZ2VzKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuc2V0TnVtYmVyT2ZQYWdlcygpOwogICAgICB9KTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLnNldE51bWJlck9mUGFnZXMoKTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICBpZiAodGhpcy4kcm91dGVyKSB7CiAgICAgIC8vIFdlIG9ubHkgYWRkIHRoZSB3YXRjaGVyIGlmIHZ1ZSByb3V0ZXIgaXMgZGV0ZWN0ZWQKICAgICAgdGhpcy4kd2F0Y2goJyRyb3V0ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlcXVlc3RBRihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMy5ndWVzc0N1cnJlbnRQYWdlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzZXROdW1iZXJPZlBhZ2VzOiBmdW5jdGlvbiBzZXROdW1iZXJPZlBhZ2VzKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGlmIChpc0FycmF5KHRoaXMucGFnZXMpICYmIHRoaXMucGFnZXMubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMubG9jYWxOdW1iZXJPZlBhZ2VzID0gdGhpcy5wYWdlcy5sZW5ndGg7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5sb2NhbE51bWJlck9mUGFnZXMgPSBzYW5pdGl6ZU51bWJlck9mUGFnZXModGhpcy5udW1iZXJPZlBhZ2VzKTsKICAgICAgfQoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC5ndWVzc0N1cnJlbnRQYWdlKCk7CiAgICAgIH0pOwogICAgfSwKICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQsIHBhZ2VOdW1iZXIpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7IC8vIERvbnQgZG8gYW55dGhpbmcgaWYgY2xpY2tpbmcgdGhlIGN1cnJlbnQgYWN0aXZlIHBhZ2UKCgogICAgICBpZiAocGFnZU51bWJlciA9PT0gdGhpcy5jdXJyZW50UGFnZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgfHwgZXZlbnQudGFyZ2V0OyAvLyBFbWl0IGEgdXNlci1jYW5jZWxhYmxlIGBwYWdlLWNsaWNrYCBldmVudAoKICAgICAgdmFyIGNsaWNrRXZ0ID0gbmV3IEJ2RXZlbnQoRVZFTlRfTkFNRV9QQUdFX0NMSUNLLCB7CiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSwKICAgICAgICB2dWVUYXJnZXQ6IHRoaXMsCiAgICAgICAgdGFyZ2V0OiB0YXJnZXQKICAgICAgfSk7CiAgICAgIHRoaXMuJGVtaXQoY2xpY2tFdnQudHlwZSwgY2xpY2tFdnQsIHBhZ2VOdW1iZXIpOwoKICAgICAgaWYgKGNsaWNrRXZ0LmRlZmF1bHRQcmV2ZW50ZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gVXBkYXRlIHRoZSBgdi1tb2RlbGAKICAgICAgLy8gRG9uZSBpbiBpbiByZXF1ZXN0QUYoKSB0byBhbGxvdyBicm93c2VyIHRvIGNvbXBsZXRlIHRoZQogICAgICAvLyBuYXRpdmUgYnJvd3NlciBjbGljayBoYW5kbGluZyBvZiBhIGxpbmsKCgogICAgICByZXF1ZXN0QUYoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNS5jdXJyZW50UGFnZSA9IHBhZ2VOdW1iZXI7CgogICAgICAgIF90aGlzNS4kZW1pdChFVkVOVF9OQU1FX0NIQU5HRSwgcGFnZU51bWJlcik7CiAgICAgIH0pOyAvLyBFbXVsYXRlIG5hdGl2ZSBsaW5rIGNsaWNrIHBhZ2UgcmVsb2FkaW5nIGJlaGF2aW91ciBieSBibHVycmluZyB0aGUKICAgICAgLy8gcGFnaW5hdG9yIGFuZCByZXR1cm5pbmcgZm9jdXMgdG8gdGhlIGRvY3VtZW50CiAgICAgIC8vIERvbmUgaW4gYSBgbmV4dFRpY2soKWAgdG8gZW5zdXJlIHJlbmRlcmluZyBjb21wbGV0ZQoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIGF0dGVtcHRCbHVyKHRhcmdldCk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFBhZ2VJbmZvOiBmdW5jdGlvbiBnZXRQYWdlSW5mbyhwYWdlTnVtYmVyKSB7CiAgICAgIGlmICghaXNBcnJheSh0aGlzLnBhZ2VzKSB8fCB0aGlzLnBhZ2VzLmxlbmd0aCA9PT0gMCB8fCBpc1VuZGVmaW5lZCh0aGlzLnBhZ2VzW3BhZ2VOdW1iZXIgLSAxXSkpIHsKICAgICAgICB2YXIgbGluayA9ICIiLmNvbmNhdCh0aGlzLmJhc2VVcmwpLmNvbmNhdChwYWdlTnVtYmVyKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbGluazogdGhpcy51c2VSb3V0ZXIgPyB7CiAgICAgICAgICAgIHBhdGg6IGxpbmsKICAgICAgICAgIH0gOiBsaW5rLAogICAgICAgICAgdGV4dDogdG9TdHJpbmcocGFnZU51bWJlcikKICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgaW5mbyA9IHRoaXMucGFnZXNbcGFnZU51bWJlciAtIDFdOwoKICAgICAgaWYgKGlzT2JqZWN0KGluZm8pKSB7CiAgICAgICAgdmFyIF9saW5rID0gaW5mby5saW5rOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAvLyBOb3JtYWxpemUgbGluayBmb3Igcm91dGVyIHVzZQogICAgICAgICAgbGluazogaXNPYmplY3QoX2xpbmspID8gX2xpbmsgOiB0aGlzLnVzZVJvdXRlciA/IHsKICAgICAgICAgICAgcGF0aDogX2xpbmsKICAgICAgICAgIH0gOiBfbGluaywKICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0ZXh0IGhhcyBhIHZhbHVlCiAgICAgICAgICB0ZXh0OiB0b1N0cmluZyhpbmZvLnRleHQgfHwgcGFnZU51bWJlcikKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBsaW5rOiB0b1N0cmluZyhpbmZvKSwKICAgICAgICAgIHRleHQ6IHRvU3RyaW5nKHBhZ2VOdW1iZXIpCiAgICAgICAgfTsKICAgICAgfQogICAgfSwKICAgIG1ha2VQYWdlOiBmdW5jdGlvbiBtYWtlUGFnZShwYWdlTnVtYmVyKSB7CiAgICAgIHZhciBwYWdlR2VuID0gdGhpcy5wYWdlR2VuOwogICAgICB2YXIgaW5mbyA9IHRoaXMuZ2V0UGFnZUluZm8ocGFnZU51bWJlcik7CgogICAgICBpZiAoaGFzUHJvcEZ1bmN0aW9uKHBhZ2VHZW4pKSB7CiAgICAgICAgcmV0dXJuIHBhZ2VHZW4ocGFnZU51bWJlciwgaW5mbyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbmZvLnRleHQ7CiAgICB9LAogICAgbWFrZUxpbms6IGZ1bmN0aW9uIG1ha2VMaW5rKHBhZ2VOdW1iZXIpIHsKICAgICAgdmFyIGxpbmtHZW4gPSB0aGlzLmxpbmtHZW47CiAgICAgIHZhciBpbmZvID0gdGhpcy5nZXRQYWdlSW5mbyhwYWdlTnVtYmVyKTsKCiAgICAgIGlmIChoYXNQcm9wRnVuY3Rpb24obGlua0dlbikpIHsKICAgICAgICByZXR1cm4gbGlua0dlbihwYWdlTnVtYmVyLCBpbmZvKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluZm8ubGluazsKICAgIH0sCiAgICBsaW5rUHJvcHM6IGZ1bmN0aW9uIGxpbmtQcm9wcyhwYWdlTnVtYmVyKSB7CiAgICAgIHZhciBwcm9wcyA9IHBsdWNrUHJvcHMoX2xpbmtQcm9wcywgdGhpcyk7CiAgICAgIHZhciBsaW5rID0gdGhpcy5tYWtlTGluayhwYWdlTnVtYmVyKTsKCiAgICAgIGlmICh0aGlzLnVzZVJvdXRlciB8fCBpc09iamVjdChsaW5rKSkgewogICAgICAgIHByb3BzLnRvID0gbGluazsKICAgICAgfSBlbHNlIHsKICAgICAgICBwcm9wcy5ocmVmID0gbGluazsKICAgICAgfQoKICAgICAgcmV0dXJuIHByb3BzOwogICAgfSwKICAgIHJlc29sdmVMaW5rOiBmdW5jdGlvbiByZXNvbHZlTGluaygpIHsKICAgICAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJzsgLy8gR2l2ZW4gYSB0byAob3IgaHJlZiBzdHJpbmcpLCBjb252ZXJ0IHRvIG5vcm1hbGl6ZWQgcm91dGUtbGlrZSBzdHJ1Y3R1cmUKICAgICAgLy8gV29ya3Mgb25seSBjbGllbnQgc2lkZSEKCiAgICAgIHZhciBsaW5rOwoKICAgICAgdHJ5IHsKICAgICAgICAvLyBDb252ZXJ0IHRoZSBgdG9gIHRvIGEgSFJFRiB2aWEgYSB0ZW1wb3JhcnkgYGFgIHRhZwogICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgbGluay5ocmVmID0gY29tcHV0ZUhyZWYoewogICAgICAgICAgdG86IHRvCiAgICAgICAgfSwgJ2EnLCAnLycsICcvJyk7IC8vIFdlIG5lZWQgdG8gYWRkIHRoZSBhbmNob3IgdG8gdGhlIGRvY3VtZW50IHRvIG1ha2Ugc3VyZSB0aGUKICAgICAgICAvLyBgcGF0aG5hbWVgIGlzIGNvcnJlY3RseSBkZXRlY3RlZCBpbiBhbnkgYnJvd3NlciAoaS5lLiBJRSkKCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsgLy8gT25jZSBocmVmIGlzIGFzc2lnbmVkLCB0aGUgbGluayB3aWxsIGJlIG5vcm1hbGl6ZWQgdG8gdGhlIGZ1bGwgVVJMIGJpdHMKCiAgICAgICAgdmFyIF9saW5rMiA9IGxpbmssCiAgICAgICAgICAgIHBhdGhuYW1lID0gX2xpbmsyLnBhdGhuYW1lLAogICAgICAgICAgICBoYXNoID0gX2xpbmsyLmhhc2gsCiAgICAgICAgICAgIHNlYXJjaCA9IF9saW5rMi5zZWFyY2g7IC8vIFJlbW92ZSBsaW5rIGZyb20gZG9jdW1lbnQKCiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTsgLy8gUmV0dXJuIHRoZSBsb2NhdGlvbiBpbiBhIHJvdXRlLWxpa2Ugb2JqZWN0CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwYXRoOiBwYXRobmFtZSwKICAgICAgICAgIGhhc2g6IGhhc2gsCiAgICAgICAgICBxdWVyeTogcGFyc2VRdWVyeShzZWFyY2gpCiAgICAgICAgfTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxpbmsgJiYgbGluay5wYXJlbnROb2RlICYmIGxpbmsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rKTsKICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7fQogICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgoKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0sCiAgICByZXNvbHZlUm91dGU6IGZ1bmN0aW9uIHJlc29sdmVSb3V0ZSgpIHsKICAgICAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJzsgLy8gR2l2ZW4gYSB0byAob3IgaHJlZiBzdHJpbmcpLCBjb252ZXJ0IHRvIG5vcm1hbGl6ZWQgcm91dGUgbG9jYXRpb24gc3RydWN0dXJlCiAgICAgIC8vIFdvcmtzIG9ubHkgd2hlbiByb3V0ZXIgYXZhaWxhYmxlIQoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgcm91dGUgPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZSh0bywgdGhpcy4kcm91dGUpLnJvdXRlOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwYXRoOiByb3V0ZS5wYXRoLAogICAgICAgICAgaGFzaDogcm91dGUuaGFzaCwKICAgICAgICAgIHF1ZXJ5OiByb3V0ZS5xdWVyeQogICAgICAgIH07CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKICAgIGd1ZXNzQ3VycmVudFBhZ2U6IGZ1bmN0aW9uIGd1ZXNzQ3VycmVudFBhZ2UoKSB7CiAgICAgIHZhciAkcm91dGVyID0gdGhpcy4kcm91dGVyLAogICAgICAgICAgJHJvdXRlID0gdGhpcy4kcm91dGU7CiAgICAgIHZhciBndWVzcyA9IHRoaXMuY29tcHV0ZWRWYWx1ZTsgLy8gVGhpcyBzZWN0aW9uIG9ubHkgb2NjdXJzIGlmIHdlIGFyZSBjbGllbnQgc2lkZSwgb3Igc2VydmVyLXNpZGUgd2l0aCBgJHJvdXRlcmAKCiAgICAgIGlmICghdGhpcy5ub1BhZ2VEZXRlY3QgJiYgIWd1ZXNzICYmIChJU19CUk9XU0VSIHx8ICFJU19CUk9XU0VSICYmICRyb3V0ZXIpKSB7CiAgICAgICAgLy8gQ3VycmVudCByb3V0ZSAoaWYgcm91dGVyIGF2YWlsYWJsZSkKICAgICAgICB2YXIgY3VycmVudFJvdXRlID0gJHJvdXRlciAmJiAkcm91dGUgPyB7CiAgICAgICAgICBwYXRoOiAkcm91dGUucGF0aCwKICAgICAgICAgIGhhc2g6ICRyb3V0ZS5oYXNoLAogICAgICAgICAgcXVlcnk6ICRyb3V0ZS5xdWVyeQogICAgICAgIH0gOiB7fTsgLy8gQ3VycmVudCBwYWdlIGZ1bGwgSFJFRiAoaWYgY2xpZW50IHNpZGUpCiAgICAgICAgLy8gQ2FuJ3QgYmUgZG9uZSBhcyBhIGNvbXB1dGVkIHByb3AhCgogICAgICAgIHZhciBsb2MgPSBJU19CUk9XU0VSID8gd2luZG93LmxvY2F0aW9uIHx8IGRvY3VtZW50LmxvY2F0aW9uIDogbnVsbDsKICAgICAgICB2YXIgY3VycmVudExpbmsgPSBsb2MgPyB7CiAgICAgICAgICBwYXRoOiBsb2MucGF0aG5hbWUsCiAgICAgICAgICBoYXNoOiBsb2MuaGFzaCwKICAgICAgICAgIHF1ZXJ5OiBwYXJzZVF1ZXJ5KGxvYy5zZWFyY2gpCiAgICAgICAgfSA6CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICB7fTsgLy8gTG9vcCB0aHJvdWdoIHRoZSBwb3NzaWJsZSBwYWdlcyBsb29raW5nIGZvciBhIG1hdGNoIHVudGlsIGZvdW5kCgogICAgICAgIGZvciAodmFyIHBhZ2VOdW1iZXIgPSAxOyAhZ3Vlc3MgJiYgcGFnZU51bWJlciA8PSB0aGlzLmxvY2FsTnVtYmVyT2ZQYWdlczsgcGFnZU51bWJlcisrKSB7CiAgICAgICAgICB2YXIgdG8gPSB0aGlzLm1ha2VMaW5rKHBhZ2VOdW1iZXIpOwoKICAgICAgICAgIGlmICgkcm91dGVyICYmIChpc09iamVjdCh0bykgfHwgdGhpcy51c2VSb3V0ZXIpKSB7CiAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIHBhZ2UgdmlhIHRoZSBgJHJvdXRlcmAKICAgICAgICAgICAgZ3Vlc3MgPSBsb29zZUVxdWFsKHRoaXMucmVzb2x2ZVJvdXRlKHRvKSwgY3VycmVudFJvdXRlKSA/IHBhZ2VOdW1iZXIgOiBudWxsOwogICAgICAgICAgfSBlbHNlIGlmIChJU19CUk9XU0VSKSB7CiAgICAgICAgICAgIC8vIElmIG5vIGAkcm91dGVyYCBhdmFpbGFibGUgKG9yIGAhdGhpcy51c2VSb3V0ZXJgIHdoZW4gYHRvYCBpcyBhIHN0cmluZykKICAgICAgICAgICAgLy8gd2UgY29tcGFyZSB1c2luZyBwYXJzZWQgVVJJcwogICAgICAgICAgICBndWVzcyA9IGxvb3NlRXF1YWwodGhpcy5yZXNvbHZlTGluayh0byksIGN1cnJlbnRMaW5rKSA/IHBhZ2VOdW1iZXIgOiBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gUHJvYmFibHkgU1NSLCBidXQgbm8gYCRyb3V0ZXJgIHNvIHdlIGNhbid0IGd1ZXNzLAogICAgICAgICAgICAvLyBzbyBsZXRzIGJyZWFrIG91dCBvZiB0aGUgbG9vcCBlYXJseQoKICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICAgICAgZ3Vlc3MgPSAtMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gLy8gV2Ugc2V0IGBjdXJyZW50UGFnZWAgdG8gYDBgIHRvIHRyaWdnZXIgYW4gYCRlbWl0KCdpbnB1dCcsIG51bGwpYAogICAgICAvLyBBcyB0aGUgZGVmYXVsdCBmb3IgYGN1cnJlbnRQYWdlYCBpcyBgLTFgIHdoZW4gbm8gdmFsdWUgaXMgc3BlY2lmaWVkCiAgICAgIC8vIFZhbGlkIHBhZ2UgbnVtYmVycyBhcmUgZ3JlYXRlciB0aGFuIGAwYAoKCiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBndWVzcyA+IDAgPyBndWVzcyA6IDA7CiAgICB9CiAgfQp9KTs="},null]}