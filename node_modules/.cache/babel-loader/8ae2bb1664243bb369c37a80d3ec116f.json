{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/utils/css-escape.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/utils/css-escape.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuL3N0cmluZyc7Cgp2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uIGVzY2FwZUNoYXIodmFsdWUpIHsKICByZXR1cm4gJ1xcJyArIHZhbHVlOwp9OyAvLyBUaGUgYGNzc0VzY2FwZSgpYCB1dGlsIGlzIGJhc2VkIG9uIHRoaXMgYENTUy5lc2NhcGUoKWAgcG9seWZpbGw6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL0NTUy5lc2NhcGUKCgpleHBvcnQgdmFyIGNzc0VzY2FwZSA9IGZ1bmN0aW9uIGNzc0VzY2FwZSh2YWx1ZSkgewogIHZhbHVlID0gdG9TdHJpbmcodmFsdWUpOwogIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7CiAgdmFyIGZpcnN0Q2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KDApOwogIHJldHVybiB2YWx1ZS5zcGxpdCgnJykucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIF9jaGFyLCBpbmRleCkgewogICAgdmFyIGNoYXJDb2RlID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCk7IC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgTlVMTCAoVSswMDAwKSwgdXNlIChVK0ZGRkQpIGFzIHJlcGxhY2VtZW50CgogICAgaWYgKGNoYXJDb2RlID09PSAweDAwMDApIHsKICAgICAgcmV0dXJuIHJlc3VsdCArICJcdUZGRkQiOwogICAgfSAvLyBJZiB0aGUgY2hhcmFjdGVyIC4uLgoKCiAgICBpZiAoIC8vIC4uLiBpcyBVKzAwN0YgT1IKICAgIGNoYXJDb2RlID09PSAweDAwN2YgfHwgLy8gLi4uIGlzIGluIHRoZSByYW5nZSBbXDEtXDFGXSAoVSswMDAxIHRvIFUrMDAxRikgT1IgLi4uCiAgICBjaGFyQ29kZSA+PSAweDAwMDEgJiYgY2hhckNvZGUgPD0gMHgwMDFmIHx8IC8vIC4uLiBpcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCBpcyBpbiB0aGUgcmFuZ2UgWzAtOV0gKFUrMDAzMCB0byBVKzAwMzkpIE9SIC4uLgogICAgaW5kZXggPT09IDAgJiYgY2hhckNvZGUgPj0gMHgwMDMwICYmIGNoYXJDb2RlIDw9IDB4MDAzOSB8fCAvLyAuLi4gaXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgYW5kIGlzIGluIHRoZSByYW5nZSBbMC05XSAoVSswMDMwIHRvIFUrMDAzOSkKICAgIC8vIGFuZCB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIGEgYC1gIChVKzAwMkQpIC4uLgogICAgaW5kZXggPT09IDEgJiYgY2hhckNvZGUgPj0gMHgwMDMwICYmIGNoYXJDb2RlIDw9IDB4MDAzOSAmJiBmaXJzdENoYXJDb2RlID09PSAweDAwMmQpIHsKICAgICAgLy8gLi4uIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jZXNjYXBlLWEtY2hhcmFjdGVyLWFzLWNvZGUtcG9pbnQKICAgICAgcmV0dXJuIHJlc3VsdCArIGVzY2FwZUNoYXIoIiIuY29uY2F0KGNoYXJDb2RlLnRvU3RyaW5nKDE2KSwgIiAiKSk7CiAgICB9IC8vIElmIHRoZSBjaGFyYWN0ZXIgLi4uCgoKICAgIGlmICggLy8gLi4uIGlzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgQU5EIC4uLgogICAgaW5kZXggPT09IDAgJiYgLy8gLi4uIGlzIGEgYC1gIChVKzAwMkQpIEFORCAuLi4KICAgIGNoYXJDb2RlID09PSAweDAwMmQgJiYgLy8gLi4uIHRoZXJlIGlzIG5vIHNlY29uZCBjaGFyYWN0ZXIgLi4uCiAgICBsZW5ndGggPT09IDEpIHsKICAgICAgLy8gLi4uIHVzZSB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIKICAgICAgcmV0dXJuIHJlc3VsdCArIGVzY2FwZUNoYXIoX2NoYXIpOwogICAgfSAvLyBJZiB0aGUgY2hhcmFjdGVyIC4uLgoKCiAgICBpZiAoIC8vIC4uLiBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gVSswMDgwIE9SIC4uLgogICAgY2hhckNvZGUgPj0gMHgwMDgwIHx8IC8vIC4uLiBpcyBgLWAgKFUrMDAyRCkgT1IgLi4uCiAgICBjaGFyQ29kZSA9PT0gMHgwMDJkIHx8IC8vIC4uLiBpcyBgX2AgKFUrMDA1RikgT1IgLi4uCiAgICBjaGFyQ29kZSA9PT0gMHgwMDVmIHx8IC8vIC4uLiBpcyBpbiB0aGUgcmFuZ2UgWzAtOV0gKFUrMDAzMCB0byBVKzAwMzkpIE9SIC4uLgogICAgY2hhckNvZGUgPj0gMHgwMDMwICYmIGNoYXJDb2RlIDw9IDB4MDAzOSB8fCAvLyAuLi4gaXMgaW4gdGhlIHJhbmdlIFtBLVpdIChVKzAwNDEgdG8gVSswMDVBKSBPUiAuLi4KICAgIGNoYXJDb2RlID49IDB4MDA0MSAmJiBjaGFyQ29kZSA8PSAweDAwNWEgfHwgLy8gLi4uIGlzIGluIHRoZSByYW5nZSBbYS16XSAoVSswMDYxIHRvIFUrMDA3QSkgLi4uCiAgICBjaGFyQ29kZSA+PSAweDAwNjEgJiYgY2hhckNvZGUgPD0gMHgwMDdhKSB7CiAgICAgIC8vIC4uLiB1c2UgdGhlIGNoYXJhY3RlciBpdHNlbGYKICAgICAgcmV0dXJuIHJlc3VsdCArIF9jaGFyOwogICAgfSAvLyBPdGhlcndpc2UgdXNlIHRoZSBlc2NhcGVkIGNoYXJhY3RlcgogICAgLy8gU2VlOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2VzY2FwZS1hLWNoYXJhY3RlcgoKCiAgICByZXR1cm4gcmVzdWx0ICsgZXNjYXBlQ2hhcihfY2hhcik7CiAgfSwgJycpOwp9Ow=="},{"version":3,"sources":["/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/utils/css-escape.js"],"names":["toString","escapeChar","value","cssEscape","length","firstCharCode","charCodeAt","split","reduce","result","char","index","charCode","concat"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,UAAzB;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAC1C,SAAO,OAAOA,KAAd;AACD,CAFD,C,CAEG;AACH;;;AAGA,OAAO,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBD,KAAnB,EAA0B;AAC/CA,EAAAA,KAAK,GAAGF,QAAQ,CAACE,KAAD,CAAhB;AACA,MAAIE,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,aAAa,GAAGH,KAAK,CAACI,UAAN,CAAiB,CAAjB,CAApB;AACA,SAAOJ,KAAK,CAACK,KAAN,CAAY,EAAZ,EAAgBC,MAAhB,CAAuB,UAAUC,MAAV,EAAkBC,KAAlB,EAAwBC,KAAxB,EAA+B;AAC3D,QAAIC,QAAQ,GAAGV,KAAK,CAACI,UAAN,CAAiBK,KAAjB,CAAf,CAD2D,CACnB;;AAExC,QAAIC,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAOH,MAAM,GAAG,QAAhB;AACD,KAL0D,CAKzD;;;AAGF,SAAK;AACLG,IAAAA,QAAQ,KAAK,MAAb,IAAuB;AACvBA,IAAAA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MADlC,IAC4C;AAC5CD,IAAAA,KAAK,KAAK,CAAV,IAAeC,QAAQ,IAAI,MAA3B,IAAqCA,QAAQ,IAAI,MAFjD,IAE2D;AAC3D;AACAD,IAAAA,KAAK,KAAK,CAAV,IAAeC,QAAQ,IAAI,MAA3B,IAAqCA,QAAQ,IAAI,MAAjD,IAA2DP,aAAa,KAAK,MAL7E,EAKqF;AACnF;AACA,aAAOI,MAAM,GAAGR,UAAU,CAAC,GAAGY,MAAH,CAAUD,QAAQ,CAACZ,QAAT,CAAkB,EAAlB,CAAV,EAAiC,GAAjC,CAAD,CAA1B;AACD,KAhB0D,CAgBzD;;;AAGF,SAAK;AACLW,IAAAA,KAAK,KAAK,CAAV,IAAe;AACfC,IAAAA,QAAQ,KAAK,MADb,IACuB;AACvBR,IAAAA,MAAM,KAAK,CAHX,EAGc;AACZ;AACA,aAAOK,MAAM,GAAGR,UAAU,CAACS,KAAD,CAA1B;AACD,KAzB0D,CAyBzD;;;AAGF,SAAK;AACLE,IAAAA,QAAQ,IAAI,MAAZ,IAAsB;AACtBA,IAAAA,QAAQ,KAAK,MADb,IACuB;AACvBA,IAAAA,QAAQ,KAAK,MAFb,IAEuB;AACvBA,IAAAA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MAHlC,IAG4C;AAC5CA,IAAAA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MAJlC,IAI4C;AAC5CA,IAAAA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MANlC,EAM0C;AACxC;AACA,aAAOH,MAAM,GAAGC,KAAhB;AACD,KArC0D,CAqCzD;AACF;;;AAGA,WAAOD,MAAM,GAAGR,UAAU,CAACS,KAAD,CAA1B;AACD,GA1CM,EA0CJ,EA1CI,CAAP;AA2CD,CA/CM","sourcesContent":["import { toString } from './string';\n\nvar escapeChar = function escapeChar(value) {\n  return '\\\\' + value;\n}; // The `cssEscape()` util is based on this `CSS.escape()` polyfill:\n// https://github.com/mathiasbynens/CSS.escape\n\n\nexport var cssEscape = function cssEscape(value) {\n  value = toString(value);\n  var length = value.length;\n  var firstCharCode = value.charCodeAt(0);\n  return value.split('').reduce(function (result, char, index) {\n    var charCode = value.charCodeAt(index); // If the character is NULL (U+0000), use (U+FFFD) as replacement\n\n    if (charCode === 0x0000) {\n      return result + \"\\uFFFD\";\n    } // If the character ...\n\n\n    if ( // ... is U+007F OR\n    charCode === 0x007f || // ... is in the range [\\1-\\1F] (U+0001 to U+001F) OR ...\n    charCode >= 0x0001 && charCode <= 0x001f || // ... is the first character and is in the range [0-9] (U+0030 to U+0039) OR ...\n    index === 0 && charCode >= 0x0030 && charCode <= 0x0039 || // ... is the second character and is in the range [0-9] (U+0030 to U+0039)\n    // and the first character is a `-` (U+002D) ...\n    index === 1 && charCode >= 0x0030 && charCode <= 0x0039 && firstCharCode === 0x002d) {\n      // ... https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      return result + escapeChar(\"\".concat(charCode.toString(16), \" \"));\n    } // If the character ...\n\n\n    if ( // ... is the first character AND ...\n    index === 0 && // ... is a `-` (U+002D) AND ...\n    charCode === 0x002d && // ... there is no second character ...\n    length === 1) {\n      // ... use the escaped character\n      return result + escapeChar(char);\n    } // If the character ...\n\n\n    if ( // ... is greater than or equal to U+0080 OR ...\n    charCode >= 0x0080 || // ... is `-` (U+002D) OR ...\n    charCode === 0x002d || // ... is `_` (U+005F) OR ...\n    charCode === 0x005f || // ... is in the range [0-9] (U+0030 to U+0039) OR ...\n    charCode >= 0x0030 && charCode <= 0x0039 || // ... is in the range [A-Z] (U+0041 to U+005A) OR ...\n    charCode >= 0x0041 && charCode <= 0x005a || // ... is in the range [a-z] (U+0061 to U+007A) ...\n    charCode >= 0x0061 && charCode <= 0x007a) {\n      // ... use the character itself\n      return result + char;\n    } // Otherwise use the escaped character\n    // See: https://drafts.csswg.org/cssom/#escape-a-character\n\n\n    return result + escapeChar(char);\n  }, '');\n};"]}]}