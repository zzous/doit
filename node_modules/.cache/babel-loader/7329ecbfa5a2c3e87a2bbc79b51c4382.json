{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js!/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/utils/dom.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/utils/dom.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js","mtime":1582363962038},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMiOwppbXBvcnQgeyBET0NVTUVOVCwgV0lORE9XIH0gZnJvbSAnLi4vY29uc3RhbnRzL2Vudic7CmltcG9ydCB7IEVsZW1lbnQgfSBmcm9tICcuLi9jb25zdGFudHMvc2FmZS10eXBlcyc7CmltcG9ydCB7IGZyb20gYXMgYXJyYXlGcm9tIH0gZnJvbSAnLi9hcnJheSc7CmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzTnVsbCB9IGZyb20gJy4vaW5zcGVjdCc7CmltcG9ydCB7IHRvRmxvYXQgfSBmcm9tICcuL251bWJlcic7CmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAnLi9zdHJpbmcnOyAvLyAtLS0gQ29uc3RhbnRzIC0tLQoKdmFyIEVMRU1FTlRfUFJPVE8gPSBFbGVtZW50LnByb3RvdHlwZTsKdmFyIFRBQkFCTEVfU0VMRUNUT1IgPSBbJ2J1dHRvbicsICdbaHJlZl06bm90KC5kaXNhYmxlZCknLCAnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ1t0YWJpbmRleF0nLCAnW2NvbnRlbnRlZGl0YWJsZV0nXS5tYXAoZnVuY3Rpb24gKHMpIHsKICByZXR1cm4gIiIuY29uY2F0KHMsICI6bm90KDpkaXNhYmxlZCk6bm90KFtkaXNhYmxlZF0pIik7Cn0pLmpvaW4oJywgJyk7IC8vIC0tLSBOb3JtYWxpemF0aW9uIHV0aWxzIC0tLQovLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L21hdGNoZXMjUG9seWZpbGwKCi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgpleHBvcnQgdmFyIG1hdGNoZXNFbCA9IEVMRU1FTlRfUFJPVE8ubWF0Y2hlcyB8fCBFTEVNRU5UX1BST1RPLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVMRU1FTlRfUFJPVE8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yOyAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3QKCi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCgpleHBvcnQgdmFyIGNsb3Nlc3RFbCA9IEVMRU1FTlRfUFJPVE8uY2xvc2VzdCB8fCBmdW5jdGlvbiAoc2VsKSB7CiAgdmFyIGVsID0gdGhpczsKCiAgZG8gewogICAgLy8gVXNlIG91ciAicGF0Y2hlZCIgbWF0Y2hlcyBmdW5jdGlvbgogICAgaWYgKG1hdGNoZXMoZWwsIHNlbCkpIHsKICAgICAgcmV0dXJuIGVsOwogICAgfQoKICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlOwogIH0gd2hpbGUgKCFpc051bGwoZWwpICYmIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSk7CgogIHJldHVybiBudWxsOwp9OyAvLyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClgIGNvbnZlbmllbmNlIG1ldGhvZAoKLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IEpTRE9NIGFsd2F5cyByZXR1cm5zIHRoZSBmaXJzdCBvcHRpb24gKi8KCmV4cG9ydCB2YXIgcmVxdWVzdEFGID0gV0lORE9XLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBXSU5ET1cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IFdJTkRPVy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgV0lORE9XLm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IFdJTkRPVy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IC8vIEZhbGxiYWNrLCBidXQgbm90IGEgdHJ1ZSBwb2x5ZmlsbAovLyBPbmx5IG5lZWRlZCBmb3IgT3BlcmEgTWluaQoKLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KZnVuY3Rpb24gKGNiKSB7CiAgcmV0dXJuIHNldFRpbWVvdXQoY2IsIDE2KTsKfTsKZXhwb3J0IHZhciBNdXRhdGlvbk9icyA9IFdJTkRPVy5NdXRhdGlvbk9ic2VydmVyIHx8IFdJTkRPVy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IFdJTkRPVy5Nb3pNdXRhdGlvbk9ic2VydmVyIHx8IG51bGw7IC8vIC0tLSBVdGlscyAtLS0KLy8gUmVtb3ZlIGEgbm9kZSBmcm9tIERPTQoKZXhwb3J0IHZhciByZW1vdmVOb2RlID0gZnVuY3Rpb24gcmVtb3ZlTm9kZShlbCkgewogIHJldHVybiBlbCAmJiBlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwp9OyAvLyBEZXRlcm1pbmUgaWYgYW4gZWxlbWVudCBpcyBhbiBIVE1MIGVsZW1lbnQKCmV4cG9ydCB2YXIgaXNFbGVtZW50ID0gZnVuY3Rpb24gaXNFbGVtZW50KGVsKSB7CiAgcmV0dXJuICEhKGVsICYmIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSk7Cn07IC8vIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBIVE1MIGVsZW1lbnQKCmV4cG9ydCB2YXIgZ2V0QWN0aXZlRWxlbWVudCA9IGZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSB7CiAgdmFyIGV4Y2x1ZGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTsKICB2YXIgYWN0aXZlRWxlbWVudCA9IERPQ1VNRU5ULmFjdGl2ZUVsZW1lbnQ7CiAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQgJiYgIWV4Y2x1ZGVzLnNvbWUoZnVuY3Rpb24gKGVsKSB7CiAgICByZXR1cm4gZWwgPT09IGFjdGl2ZUVsZW1lbnQ7CiAgfSkgPyBhY3RpdmVFbGVtZW50IDogbnVsbDsKfTsgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgYSB0YWcncyBuYW1lIGVxdWFscyBgbmFtZWAKCmV4cG9ydCB2YXIgaXNUYWcgPSBmdW5jdGlvbiBpc1RhZyh0YWcsIG5hbWUpIHsKICByZXR1cm4gdG9TdHJpbmcodGFnKS50b0xvd2VyQ2FzZSgpID09PSB0b1N0cmluZyhuYW1lKS50b0xvd2VyQ2FzZSgpOwp9OyAvLyBEZXRlcm1pbmUgaWYgYW4gSFRNTCBlbGVtZW50IGlzIHRoZSBjdXJyZW50bHkgYWN0aXZlIGVsZW1lbnQKCmV4cG9ydCB2YXIgaXNBY3RpdmVFbGVtZW50ID0gZnVuY3Rpb24gaXNBY3RpdmVFbGVtZW50KGVsKSB7CiAgcmV0dXJuIGlzRWxlbWVudChlbCkgJiYgZWwgPT09IGdldEFjdGl2ZUVsZW1lbnQoKTsKfTsgLy8gRGV0ZXJtaW5lIGlmIGFuIEhUTUwgZWxlbWVudCBpcyB2aXNpYmxlIC0gRmFzdGVyIHRoYW4gQ1NTIGNoZWNrCgpleHBvcnQgdmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZShlbCkgewogIGlmICghaXNFbGVtZW50KGVsKSB8fCAhZWwucGFyZW50Tm9kZSB8fCAhY29udGFpbnMoRE9DVU1FTlQuYm9keSwgZWwpKSB7CiAgICAvLyBOb3RlIHRoaXMgY2FuIGZhaWwgZm9yIHNoYWRvdyBkb20gZWxlbWVudHMgc2luY2UgdGhleQogICAgLy8gYXJlIG5vdCBhIGRpcmVjdCBkZXNjZW5kYW50IG9mIGRvY3VtZW50LmJvZHkKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGlmIChnZXRTdHlsZShlbCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7CiAgICAvLyBXZSBkbyB0aGlzIGNoZWNrIHRvIGhlbHAgd2l0aCB2dWUtdGVzdC11dGlscyB3aGVuIHVzaW5nIHYtc2hvdwoKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICByZXR1cm4gZmFsc2U7CiAgfSAvLyBBbGwgYnJvd3NlcnMgc3VwcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZXhjZXB0IEpTRE9NIGFzIGl0IHJldHVybnMgYWxsIDAncyBmb3IgdmFsdWVzIDooCiAgLy8gU28gYW55IHRlc3RzIHRoYXQgbmVlZCBpc1Zpc2libGUgd2lsbCBmYWlsIGluIEpTRE9NCiAgLy8gRXhjZXB0IHdoZW4gd2Ugb3ZlcnJpZGUgdGhlIGdldEJDUiBwcm90b3R5cGUgaW4gc29tZSB0ZXN0cwoKCiAgdmFyIGJjciA9IGdldEJDUihlbCk7CiAgcmV0dXJuICEhKGJjciAmJiBiY3IuaGVpZ2h0ID4gMCAmJiBiY3Iud2lkdGggPiAwKTsKfTsgLy8gRGV0ZXJtaW5lIGlmIGFuIGVsZW1lbnQgaXMgZGlzYWJsZWQKCmV4cG9ydCB2YXIgaXNEaXNhYmxlZCA9IGZ1bmN0aW9uIGlzRGlzYWJsZWQoZWwpIHsKICByZXR1cm4gIWlzRWxlbWVudChlbCkgfHwgZWwuZGlzYWJsZWQgfHwgaGFzQXR0cihlbCwgJ2Rpc2FibGVkJykgfHwgaGFzQ2xhc3MoZWwsICdkaXNhYmxlZCcpOwp9OyAvLyBDYXVzZS93YWl0LWZvciBhbiBlbGVtZW50IHRvIHJlZmxvdyBpdHMgY29udGVudCAoYWRqdXN0aW5nIGl0cyBoZWlnaHQvd2lkdGgpCgpleHBvcnQgdmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhlbCkgewogIC8vIFJlcXVlc3RpbmcgYW4gZWxlbWVudHMgb2Zmc2V0SGlnaHQgd2lsbCB0cmlnZ2VyIGEgcmVmbG93IG9mIHRoZSBlbGVtZW50IGNvbnRlbnQKCiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHJlZmxvdyBkb2Vzbid0IGhhcHBlbiBpbiBKU0RPTSAqLwogIHJldHVybiBpc0VsZW1lbnQoZWwpICYmIGVsLm9mZnNldEhlaWdodDsKfTsgLy8gU2VsZWN0IGFsbCBlbGVtZW50cyBtYXRjaGluZyBzZWxlY3Rvci4gUmV0dXJucyBgW11gIGlmIG5vbmUgZm91bmQKCmV4cG9ydCB2YXIgc2VsZWN0QWxsID0gZnVuY3Rpb24gc2VsZWN0QWxsKHNlbGVjdG9yLCByb290KSB7CiAgcmV0dXJuIGFycmF5RnJvbSgoaXNFbGVtZW50KHJvb3QpID8gcm9vdCA6IERPQ1VNRU5UKS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7Cn07IC8vIFNlbGVjdCBhIHNpbmdsZSBlbGVtZW50LCByZXR1cm5zIGBudWxsYCBpZiBub3QgZm91bmQKCmV4cG9ydCB2YXIgc2VsZWN0ID0gZnVuY3Rpb24gc2VsZWN0KHNlbGVjdG9yLCByb290KSB7CiAgcmV0dXJuIChpc0VsZW1lbnQocm9vdCkgPyByb290IDogRE9DVU1FTlQpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIHx8IG51bGw7Cn07IC8vIERldGVybWluZSBpZiBhbiBlbGVtZW50IG1hdGNoZXMgYSBzZWxlY3RvcgoKZXhwb3J0IHZhciBtYXRjaGVzID0gZnVuY3Rpb24gbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHsKICByZXR1cm4gaXNFbGVtZW50KGVsKSA/IG1hdGNoZXNFbC5jYWxsKGVsLCBzZWxlY3RvcikgOiBmYWxzZTsKfTsgLy8gRmluZHMgY2xvc2VzdCBlbGVtZW50IG1hdGNoaW5nIHNlbGVjdG9yLiBSZXR1cm5zIGBudWxsYCBpZiBub3QgZm91bmQKCmV4cG9ydCB2YXIgY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IsIHJvb3QpIHsKICB2YXIgaW5jbHVkZVJvb3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwoKICBpZiAoIWlzRWxlbWVudChyb290KSkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICB2YXIgZWwgPSBjbG9zZXN0RWwuY2FsbChyb290LCBzZWxlY3Rvcik7IC8vIE5hdGl2ZSBjbG9zZXN0IGJlaGF2aW91ciB3aGVuIGBpbmNsdWRlUm9vdGAgaXMgdHJ1dGh5LAogIC8vIGVsc2UgZW11bGF0ZSBqUXVlcnkgY2xvc2VzdCBhbmQgcmV0dXJuIGBudWxsYCBpZiBtYXRjaCBpcwogIC8vIHRoZSBwYXNzZWQgaW4gcm9vdCBlbGVtZW50IHdoZW4gYGluY2x1ZGVSb290YCBpcyBmYWxzZXkKCiAgcmV0dXJuIGluY2x1ZGVSb290ID8gZWwgOiBlbCA9PT0gcm9vdCA/IG51bGwgOiBlbDsKfTsgLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXJlbnQgZWxlbWVudCBjb250YWlucyB0aGUgY2hpbGQgZWxlbWVudAoKZXhwb3J0IHZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHsKICByZXR1cm4gcGFyZW50ICYmIGlzRnVuY3Rpb24ocGFyZW50LmNvbnRhaW5zKSA/IHBhcmVudC5jb250YWlucyhjaGlsZCkgOiBmYWxzZTsKfTsgLy8gR2V0IGFuIGVsZW1lbnQgZ2l2ZW4gYW4gSUQKCmV4cG9ydCB2YXIgZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHsKICByZXR1cm4gRE9DVU1FTlQuZ2V0RWxlbWVudEJ5SWQoL14jLy50ZXN0KGlkKSA/IGlkLnNsaWNlKDEpIDogaWQpIHx8IG51bGw7Cn07IC8vIEFkZCBhIGNsYXNzIHRvIGFuIGVsZW1lbnQKCmV4cG9ydCB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7CiAgLy8gV2UgYXJlIGNoZWNraW5nIGZvciBgZWwuY2xhc3NMaXN0YCBleGlzdGVuY2UgaGVyZSBzaW5jZSBJRSAxMQogIC8vIHJldHVybnMgYHVuZGVmaW5lZGAgZm9yIHNvbWUgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKQogIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYm9vdHN0cmFwLXZ1ZS9ib290c3RyYXAtdnVlL2lzc3Vlcy8yNzEzCiAgaWYgKGNsYXNzTmFtZSAmJiBpc0VsZW1lbnQoZWwpICYmIGVsLmNsYXNzTGlzdCkgewogICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOwogIH0KfTsgLy8gUmVtb3ZlIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50CgpleHBvcnQgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkgewogIC8vIFdlIGFyZSBjaGVja2luZyBmb3IgYGVsLmNsYXNzTGlzdGAgZXhpc3RlbmNlIGhlcmUgc2luY2UgSUUgMTEKICAvLyByZXR1cm5zIGB1bmRlZmluZWRgIGZvciBzb21lIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cykKICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Jvb3RzdHJhcC12dWUvYm9vdHN0cmFwLXZ1ZS9pc3N1ZXMvMjcxMwogIGlmIChjbGFzc05hbWUgJiYgaXNFbGVtZW50KGVsKSAmJiBlbC5jbGFzc0xpc3QpIHsKICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsKICB9Cn07IC8vIFRlc3QgaWYgYW4gZWxlbWVudCBoYXMgYSBjbGFzcwoKZXhwb3J0IHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHsKICAvLyBXZSBhcmUgY2hlY2tpbmcgZm9yIGBlbC5jbGFzc0xpc3RgIGV4aXN0ZW5jZSBoZXJlIHNpbmNlIElFIDExCiAgLy8gcmV0dXJucyBgdW5kZWZpbmVkYCBmb3Igc29tZSBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpCiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ib290c3RyYXAtdnVlL2Jvb3RzdHJhcC12dWUvaXNzdWVzLzI3MTMKICBpZiAoY2xhc3NOYW1lICYmIGlzRWxlbWVudChlbCkgJiYgZWwuY2xhc3NMaXN0KSB7CiAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7CiAgfQoKICByZXR1cm4gZmFsc2U7Cn07IC8vIFNldCBhbiBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudAoKZXhwb3J0IHZhciBzZXRBdHRyID0gZnVuY3Rpb24gc2V0QXR0cihlbCwgYXR0ciwgdmFsdWUpIHsKICBpZiAoYXR0ciAmJiBpc0VsZW1lbnQoZWwpKSB7CiAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpOwogIH0KfTsgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIGFuIGVsZW1lbnQKCmV4cG9ydCB2YXIgcmVtb3ZlQXR0ciA9IGZ1bmN0aW9uIHJlbW92ZUF0dHIoZWwsIGF0dHIpIHsKICBpZiAoYXR0ciAmJiBpc0VsZW1lbnQoZWwpKSB7CiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7CiAgfQp9OyAvLyBHZXQgYW4gYXR0cmlidXRlIHZhbHVlIGZyb20gYW4gZWxlbWVudAovLyBSZXR1cm5zIGBudWxsYCBpZiBub3QgZm91bmQKCmV4cG9ydCB2YXIgZ2V0QXR0ciA9IGZ1bmN0aW9uIGdldEF0dHIoZWwsIGF0dHIpIHsKICByZXR1cm4gYXR0ciAmJiBpc0VsZW1lbnQoZWwpID8gZWwuZ2V0QXR0cmlidXRlKGF0dHIpIDogbnVsbDsKfTsgLy8gRGV0ZXJtaW5lIGlmIGFuIGF0dHJpYnV0ZSBleGlzdHMgb24gYW4gZWxlbWVudAovLyBSZXR1cm5zIGB0cnVlYCBvciBgZmFsc2VgLCBvciBgbnVsbGAgaWYgZWxlbWVudCBub3QgZm91bmQKCmV4cG9ydCB2YXIgaGFzQXR0ciA9IGZ1bmN0aW9uIGhhc0F0dHIoZWwsIGF0dHIpIHsKICByZXR1cm4gYXR0ciAmJiBpc0VsZW1lbnQoZWwpID8gZWwuaGFzQXR0cmlidXRlKGF0dHIpIDogbnVsbDsKfTsgLy8gU2V0IGFuIHN0eWxlIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQKCmV4cG9ydCB2YXIgc2V0U3R5bGUgPSBmdW5jdGlvbiBzZXRTdHlsZShlbCwgcHJvcCwgdmFsdWUpIHsKICBpZiAocHJvcCAmJiBpc0VsZW1lbnQoZWwpKSB7CiAgICBlbC5zdHlsZVtwcm9wXSA9IHZhbHVlOwogIH0KfTsgLy8gUmVtb3ZlIGFuIHN0eWxlIHByb3BlcnR5IGZyb20gYW4gZWxlbWVudAoKZXhwb3J0IHZhciByZW1vdmVTdHlsZSA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlKGVsLCBwcm9wKSB7CiAgaWYgKHByb3AgJiYgaXNFbGVtZW50KGVsKSkgewogICAgZWwuc3R5bGVbcHJvcF0gPSAnJzsKICB9Cn07IC8vIEdldCBhbiBzdHlsZSBwcm9wZXJ0eSB2YWx1ZSBmcm9tIGFuIGVsZW1lbnQKLy8gUmV0dXJucyBgbnVsbGAgaWYgbm90IGZvdW5kCgpleHBvcnQgdmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3ApIHsKICByZXR1cm4gcHJvcCAmJiBpc0VsZW1lbnQoZWwpID8gZWwuc3R5bGVbcHJvcF0gfHwgbnVsbCA6IG51bGw7Cn07IC8vIFJldHVybiB0aGUgQm91bmRpbmcgQ2xpZW50IFJlY3Qgb2YgYW4gZWxlbWVudAovLyBSZXR1cm5zIGBudWxsYCBpZiBub3QgYW4gZWxlbWVudAoKLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGRvZXNuJ3Qgd29yayBpbiBKU0RPTSAqLwoKZXhwb3J0IHZhciBnZXRCQ1IgPSBmdW5jdGlvbiBnZXRCQ1IoZWwpIHsKICByZXR1cm4gaXNFbGVtZW50KGVsKSA/IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogbnVsbDsKfTsgLy8gR2V0IGNvbXB1dGVkIHN0eWxlIG9iamVjdCBmb3IgYW4gZWxlbWVudAoKLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGdldENvbXB1dGVkU3R5bGUoKSBkb2Vzbid0IHdvcmsgaW4gSlNET00gKi8KCmV4cG9ydCB2YXIgZ2V0Q1MgPSBmdW5jdGlvbiBnZXRDUyhlbCkgewogIHZhciBnZXRDb21wdXRlZFN0eWxlID0gV0lORE9XLmdldENvbXB1dGVkU3R5bGU7CiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUgJiYgaXNFbGVtZW50KGVsKSA/IGdldENvbXB1dGVkU3R5bGUoZWwpIDoge307Cn07IC8vIFJldHVybnMgYSBgU2VsZWN0aW9uYCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByYW5nZSBvZiB0ZXh0IHNlbGVjdGVkCi8vIFJldHVybnMgYG51bGxgIGlmIG5vIHdpbmRvdyBzdXBwb3J0IGlzIGdpdmVuCgovKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogZ2V0U2VsZWN0aW9uKCkgZG9lc24ndCB3b3JrIGluIEpTRE9NICovCgpleHBvcnQgdmFyIGdldFNlbCA9IGZ1bmN0aW9uIGdldFNlbCgpIHsKICB2YXIgZ2V0U2VsZWN0aW9uID0gV0lORE9XLmdldFNlbGVjdGlvbjsKICByZXR1cm4gZ2V0U2VsZWN0aW9uID8gV0lORE9XLmdldFNlbGVjdGlvbigpIDogbnVsbDsKfTsgLy8gUmV0dXJuIGFuIGVsZW1lbnQncyBvZmZzZXQgd2l0aCByZXNwZWN0IHRvIGRvY3VtZW50IGVsZW1lbnQKLy8gaHR0cHM6Ly9qMTF5LmlvL2pxdWVyeS8jdj1naXQmZm49alF1ZXJ5LmZuLm9mZnNldAoKZXhwb3J0IHZhciBvZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQoZWwpCi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZ2V0Q2xpZW50UmVjdHMoKSBkb2Vzbid0IHdvcmsgaW4gSlNET00gKi8KewogIHZhciBfb2Zmc2V0ID0gewogICAgdG9wOiAwLAogICAgbGVmdDogMAogIH07CgogIGlmICghaXNFbGVtZW50KGVsKSB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIF9vZmZzZXQ7CiAgfQoKICB2YXIgYmNyID0gZ2V0QkNSKGVsKTsKCiAgaWYgKGJjcikgewogICAgdmFyIHdpbiA9IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7CiAgICBfb2Zmc2V0LnRvcCA9IGJjci50b3AgKyB3aW4ucGFnZVlPZmZzZXQ7CiAgICBfb2Zmc2V0LmxlZnQgPSBiY3IubGVmdCArIHdpbi5wYWdlWE9mZnNldDsKICB9CgogIHJldHVybiBfb2Zmc2V0Owp9OyAvLyBSZXR1cm4gYW4gZWxlbWVudCdzIG9mZnNldCB3aXRoIHJlc3BlY3QgdG8gdG8gaXRzIG9mZnNldFBhcmVudAovLyBodHRwczovL2oxMXkuaW8vanF1ZXJ5LyN2PWdpdCZmbj1qUXVlcnkuZm4ucG9zaXRpb24KCmV4cG9ydCB2YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbihlbCkKLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGRvZXNuJ3Qgd29yayBpbiBKU0RPTSAqLwp7CiAgdmFyIF9vZmZzZXQgPSB7CiAgICB0b3A6IDAsCiAgICBsZWZ0OiAwCiAgfTsKCiAgaWYgKCFpc0VsZW1lbnQoZWwpKSB7CiAgICByZXR1cm4gX29mZnNldDsKICB9CgogIHZhciBwYXJlbnRPZmZzZXQgPSB7CiAgICB0b3A6IDAsCiAgICBsZWZ0OiAwCiAgfTsKICB2YXIgZWxTdHlsZXMgPSBnZXRDUyhlbCk7CgogIGlmIChlbFN0eWxlcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykgewogICAgX29mZnNldCA9IGdldEJDUihlbCkgfHwgX29mZnNldDsKICB9IGVsc2UgewogICAgX29mZnNldCA9IG9mZnNldChlbCk7CiAgICB2YXIgZG9jID0gZWwub3duZXJEb2N1bWVudDsKICAgIHZhciBvZmZzZXRQYXJlbnQgPSBlbC5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDsKCiAgICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIChvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCkgJiYgZ2V0Q1Mob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHsKICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7CiAgICB9CgogICAgaWYgKG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHsKICAgICAgcGFyZW50T2Zmc2V0ID0gb2Zmc2V0KG9mZnNldFBhcmVudCk7CiAgICAgIHZhciBvZmZzZXRQYXJlbnRTdHlsZXMgPSBnZXRDUyhvZmZzZXRQYXJlbnQpOwogICAgICBwYXJlbnRPZmZzZXQudG9wICs9IHRvRmxvYXQob2Zmc2V0UGFyZW50U3R5bGVzLmJvcmRlclRvcFdpZHRoLCAwKTsKICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gdG9GbG9hdChvZmZzZXRQYXJlbnRTdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAwKTsKICAgIH0KICB9CgogIHJldHVybiB7CiAgICB0b3A6IF9vZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIHRvRmxvYXQoZWxTdHlsZXMubWFyZ2luVG9wLCAwKSwKICAgIGxlZnQ6IF9vZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0gdG9GbG9hdChlbFN0eWxlcy5tYXJnaW5MZWZ0LCAwKQogIH07Cn07IC8vIEZpbmQgYWxsIHRhYmFibGUgZWxlbWVudHMgaW4gdGhlIGdpdmVuIGVsZW1lbnQKLy8gQXNzdW1lcyB1c2VycyBoYXZlIG5vdCB1c2VkIGB0YWJpbmRleGAgPiBgMGAgb24gZWxlbWVudHMKCmV4cG9ydCB2YXIgZ2V0VGFiYWJsZXMgPSBmdW5jdGlvbiBnZXRUYWJhYmxlcygpIHsKICB2YXIgcm9vdEVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudDsKICByZXR1cm4gc2VsZWN0QWxsKFRBQkFCTEVfU0VMRUNUT1IsIHJvb3RFbCkuZmlsdGVyKGlzVmlzaWJsZSkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgewogICAgcmV0dXJuIGVsLnRhYkluZGV4ID4gLTEgJiYgIWVsLmRpc2FibGVkOwogIH0pOwp9OyAvLyBBdHRlbXB0IHRvIGZvY3VzIGFuIGVsZW1lbnQsIGFuZCByZXR1cm4gYHRydWVgIGlmIHN1Y2Nlc3NmdWwKCmV4cG9ydCB2YXIgYXR0ZW1wdEZvY3VzID0gZnVuY3Rpb24gYXR0ZW1wdEZvY3VzKGVsKSB7CiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwoKICB0cnkgewogICAgZWwuZm9jdXMob3B0aW9ucyk7CiAgfSBjYXRjaCAoX3VudXNlZCkge30KCiAgcmV0dXJuIGlzQWN0aXZlRWxlbWVudChlbCk7Cn07IC8vIEF0dGVtcHQgdG8gYmx1ciBhbiBlbGVtZW50LCBhbmQgcmV0dXJuIGB0cnVlYCBpZiBzdWNjZXNzZnVsCgpleHBvcnQgdmFyIGF0dGVtcHRCbHVyID0gZnVuY3Rpb24gYXR0ZW1wdEJsdXIoZWwpIHsKICB0cnkgewogICAgZWwuYmx1cigpOwogIH0gY2F0Y2ggKF91bnVzZWQyKSB7fQoKICByZXR1cm4gIWlzQWN0aXZlRWxlbWVudChlbCk7Cn07"},null]}