{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js!/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js","mtime":1582363962038},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}