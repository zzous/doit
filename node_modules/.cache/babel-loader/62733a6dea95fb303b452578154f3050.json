{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js!/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/toast/toast.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/toast/toast.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js","mtime":1582363962038},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLm5vdyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMiOwoKdmFyIF93YXRjaDsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKaW1wb3J0IHsgUG9ydGFsLCBXb3JtaG9sZSB9IGZyb20gJ3BvcnRhbC12dWUnOwppbXBvcnQgeyBDT01QT05FTlRfVUlEX0tFWSwgVnVlIH0gZnJvbSAnLi4vLi4vdnVlJzsKaW1wb3J0IHsgTkFNRV9UT0FTVCwgTkFNRV9UT0FTVEVSIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2NvbXBvbmVudHMnOwppbXBvcnQgeyBFVkVOVF9OQU1FX0NIQU5HRSwgRVZFTlRfTkFNRV9ERVNUUk9ZRUQsIEVWRU5UX05BTUVfSElEREVOLCBFVkVOVF9OQU1FX0hJREUsIEVWRU5UX05BTUVfU0hPVywgRVZFTlRfTkFNRV9TSE9XTiwgRVZFTlRfT1BUSU9OU19OT19DQVBUVVJFIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL2V2ZW50cyc7CmltcG9ydCB7IFBST1BfVFlQRV9BUlJBWV9PQkpFQ1RfU1RSSU5HLCBQUk9QX1RZUEVfQk9PTEVBTiwgUFJPUF9UWVBFX05VTUJFUl9TVFJJTkcsIFBST1BfVFlQRV9TVFJJTkcgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHJvcHMnOwppbXBvcnQgeyBTTE9UX05BTUVfREVGQVVMVCwgU0xPVF9OQU1FX1RPQVNUX1RJVExFIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3Nsb3RzJzsKaW1wb3J0IHsgQnZFdmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2J2LWV2ZW50LmNsYXNzJzsKaW1wb3J0IHsgcmVxdWVzdEFGIH0gZnJvbSAnLi4vLi4vdXRpbHMvZG9tJzsKaW1wb3J0IHsgZ2V0Um9vdEFjdGlvbkV2ZW50TmFtZSwgZ2V0Um9vdEV2ZW50TmFtZSwgZXZlbnRPbk9mZiB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50cyc7CmltcG9ydCB7IG1hdGhNYXggfSBmcm9tICcuLi8uLi91dGlscy9tYXRoJzsKaW1wb3J0IHsgbWFrZU1vZGVsTWl4aW4gfSBmcm9tICcuLi8uLi91dGlscy9tb2RlbCc7CmltcG9ydCB7IHRvSW50ZWdlciB9IGZyb20gJy4uLy4uL3V0aWxzL251bWJlcic7CmltcG9ydCB7IHBpY2ssIHNvcnRLZXlzIH0gZnJvbSAnLi4vLi4vdXRpbHMvb2JqZWN0JzsKaW1wb3J0IHsgbWFrZVByb3AsIG1ha2VQcm9wc0NvbmZpZ3VyYWJsZSwgcGx1Y2tQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3Byb3BzJzsKaW1wb3J0IHsgaXNMaW5rIH0gZnJvbSAnLi4vLi4vdXRpbHMvcm91dGVyJzsKaW1wb3J0IHsgYXR0cnNNaXhpbiB9IGZyb20gJy4uLy4uL21peGlucy9hdHRycyc7CmltcG9ydCB7IGlkTWl4aW4sIHByb3BzIGFzIGlkUHJvcHMgfSBmcm9tICcuLi8uLi9taXhpbnMvaWQnOwppbXBvcnQgeyBsaXN0ZW5PblJvb3RNaXhpbiB9IGZyb20gJy4uLy4uL21peGlucy9saXN0ZW4tb24tcm9vdCc7CmltcG9ydCB7IG5vcm1hbGl6ZVNsb3RNaXhpbiB9IGZyb20gJy4uLy4uL21peGlucy9ub3JtYWxpemUtc2xvdCc7CmltcG9ydCB7IHNjb3BlZFN0eWxlTWl4aW4gfSBmcm9tICcuLi8uLi9taXhpbnMvc2NvcGVkLXN0eWxlJzsKaW1wb3J0IHsgQkJ1dHRvbkNsb3NlIH0gZnJvbSAnLi4vYnV0dG9uL2J1dHRvbi1jbG9zZSc7CmltcG9ydCB7IEJMaW5rLCBwcm9wcyBhcyBCTGlua1Byb3BzIH0gZnJvbSAnLi4vbGluay9saW5rJzsKaW1wb3J0IHsgQlZUcmFuc2l0aW9uIH0gZnJvbSAnLi4vdHJhbnNpdGlvbi9idi10cmFuc2l0aW9uJzsKaW1wb3J0IHsgQlRvYXN0ZXIgfSBmcm9tICcuL3RvYXN0ZXInOyAvLyAtLS0gQ29uc3RhbnRzIC0tLQoKdmFyIF9tYWtlTW9kZWxNaXhpbiA9IG1ha2VNb2RlbE1peGluKCd2aXNpYmxlJywgewogIHR5cGU6IFBST1BfVFlQRV9CT09MRUFOLAogIGRlZmF1bHRWYWx1ZTogZmFsc2UsCiAgZXZlbnQ6IEVWRU5UX05BTUVfQ0hBTkdFCn0pLAogICAgbW9kZWxNaXhpbiA9IF9tYWtlTW9kZWxNaXhpbi5taXhpbiwKICAgIG1vZGVsUHJvcHMgPSBfbWFrZU1vZGVsTWl4aW4ucHJvcHMsCiAgICBNT0RFTF9QUk9QX05BTUUgPSBfbWFrZU1vZGVsTWl4aW4ucHJvcCwKICAgIE1PREVMX0VWRU5UX05BTUUgPSBfbWFrZU1vZGVsTWl4aW4uZXZlbnQ7Cgp2YXIgTUlOX0RVUkFUSU9OID0gMTAwMDsgLy8gLS0tIFByb3BzIC0tLQoKdmFyIGxpbmtQcm9wcyA9IHBpY2soQkxpbmtQcm9wcywgWydocmVmJywgJ3RvJ10pOwpleHBvcnQgdmFyIHByb3BzID0gbWFrZVByb3BzQ29uZmlndXJhYmxlKHNvcnRLZXlzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGlkUHJvcHMpLCBtb2RlbFByb3BzKSwgbGlua1Byb3BzKSwge30sIHsKICBhcHBlbmRUb2FzdDogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICBhdXRvSGlkZURlbGF5OiBtYWtlUHJvcChQUk9QX1RZUEVfTlVNQkVSX1NUUklORywgNTAwMCksCiAgYm9keUNsYXNzOiBtYWtlUHJvcChQUk9QX1RZUEVfQVJSQVlfT0JKRUNUX1NUUklORyksCiAgaGVhZGVyQ2xhc3M6IG1ha2VQcm9wKFBST1BfVFlQRV9BUlJBWV9PQkpFQ1RfU1RSSU5HKSwKICAvLyBTd2l0Y2hlcyByb2xlIHRvICdzdGF0dXMnIGFuZCBhcmlhLWxpdmUgdG8gJ3BvbGl0ZScKICBpc1N0YXR1czogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICBub0F1dG9IaWRlOiBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpLAogIG5vQ2xvc2VCdXR0b246IG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOLCBmYWxzZSksCiAgbm9GYWRlOiBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpLAogIG5vSG92ZXJQYXVzZTogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICBzb2xpZDogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICAvLyBSZW5kZXIgdGhlIHRvYXN0IGluIHBsYWNlLCByYXRoZXIgdGhhbiBpbiBhIHBvcnRhbC10YXJnZXQKICAic3RhdGljIjogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICB0aXRsZTogbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORyksCiAgdG9hc3RDbGFzczogbWFrZVByb3AoUFJPUF9UWVBFX0FSUkFZX09CSkVDVF9TVFJJTkcpLAogIHRvYXN0ZXI6IG1ha2VQcm9wKFBST1BfVFlQRV9TVFJJTkcsICdiLXRvYXN0ZXItdG9wLXJpZ2h0JyksCiAgdmFyaWFudDogbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORykKfSkpLCBOQU1FX1RPQVNUKTsgLy8gLS0tIE1haW4gY29tcG9uZW50IC0tLQovLyBAdnVlL2NvbXBvbmVudAoKZXhwb3J0IHZhciBCVG9hc3QgPSAvKiNfX1BVUkVfXyovVnVlLmV4dGVuZCh7CiAgbmFtZTogTkFNRV9UT0FTVCwKICBtaXhpbnM6IFthdHRyc01peGluLCBpZE1peGluLCBtb2RlbE1peGluLCBsaXN0ZW5PblJvb3RNaXhpbiwgbm9ybWFsaXplU2xvdE1peGluLCBzY29wZWRTdHlsZU1peGluXSwKICBpbmhlcml0QXR0cnM6IGZhbHNlLAogIHByb3BzOiBwcm9wcywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNNb3VudGVkOiBmYWxzZSwKICAgICAgZG9SZW5kZXI6IGZhbHNlLAogICAgICBsb2NhbFNob3c6IGZhbHNlLAogICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlLAogICAgICBpc0hpZGluZzogZmFsc2UsCiAgICAgIG9yZGVyOiAwLAogICAgICBkaXNtaXNzU3RhcnRlZDogMCwKICAgICAgcmVzdW1lRGlzbWlzczogMAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICB0b2FzdENsYXNzZXM6IGZ1bmN0aW9uIHRvYXN0Q2xhc3NlcygpIHsKICAgICAgdmFyIGFwcGVuZFRvYXN0ID0gdGhpcy5hcHBlbmRUb2FzdCwKICAgICAgICAgIHZhcmlhbnQgPSB0aGlzLnZhcmlhbnQ7CiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoewogICAgICAgICdiLXRvYXN0LXNvbGlkJzogdGhpcy5zb2xpZCwKICAgICAgICAnYi10b2FzdC1hcHBlbmQnOiBhcHBlbmRUb2FzdCwKICAgICAgICAnYi10b2FzdC1wcmVwZW5kJzogIWFwcGVuZFRvYXN0CiAgICAgIH0sICJiLXRvYXN0LSIuY29uY2F0KHZhcmlhbnQpLCB2YXJpYW50KTsKICAgIH0sCiAgICBzbG90U2NvcGU6IGZ1bmN0aW9uIHNsb3RTY29wZSgpIHsKICAgICAgdmFyIGhpZGUgPSB0aGlzLmhpZGU7CiAgICAgIHJldHVybiB7CiAgICAgICAgaGlkZTogaGlkZQogICAgICB9OwogICAgfSwKICAgIGNvbXB1dGVkRHVyYXRpb246IGZ1bmN0aW9uIGNvbXB1dGVkRHVyYXRpb24oKSB7CiAgICAgIC8vIE1pbmltdW0gc3VwcG9ydGVkIGR1cmF0aW9uIGlzIDEgc2Vjb25kCiAgICAgIHJldHVybiBtYXRoTWF4KHRvSW50ZWdlcih0aGlzLmF1dG9IaWRlRGVsYXksIDApLCBNSU5fRFVSQVRJT04pOwogICAgfSwKICAgIGNvbXB1dGVkVG9hc3RlcjogZnVuY3Rpb24gY29tcHV0ZWRUb2FzdGVyKCkgewogICAgICByZXR1cm4gU3RyaW5nKHRoaXMudG9hc3Rlcik7CiAgICB9LAogICAgdHJhbnNpdGlvbkhhbmRsZXJzOiBmdW5jdGlvbiB0cmFuc2l0aW9uSGFuZGxlcnMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmVmb3JlRW50ZXI6IHRoaXMub25CZWZvcmVFbnRlciwKICAgICAgICBhZnRlckVudGVyOiB0aGlzLm9uQWZ0ZXJFbnRlciwKICAgICAgICBiZWZvcmVMZWF2ZTogdGhpcy5vbkJlZm9yZUxlYXZlLAogICAgICAgIGFmdGVyTGVhdmU6IHRoaXMub25BZnRlckxlYXZlCiAgICAgIH07CiAgICB9LAogICAgY29tcHV0ZWRBdHRyczogZnVuY3Rpb24gY29tcHV0ZWRBdHRycygpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5idkF0dHJzKSwge30sIHsKICAgICAgICBpZDogdGhpcy5zYWZlSWQoKSwKICAgICAgICB0YWJpbmRleDogJzAnCiAgICAgIH0pOwogICAgfQogIH0sCiAgd2F0Y2g6IChfd2F0Y2ggPSB7fSwgX2RlZmluZVByb3BlcnR5KF93YXRjaCwgTU9ERUxfUFJPUF9OQU1FLCBmdW5jdGlvbiAobmV3VmFsdWUpIHsKICAgIHRoaXNbbmV3VmFsdWUgPyAnc2hvdycgOiAnaGlkZSddKCk7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfd2F0Y2gsICJsb2NhbFNob3ciLCBmdW5jdGlvbiBsb2NhbFNob3cobmV3VmFsdWUpIHsKICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpc1tNT0RFTF9QUk9QX05BTUVdKSB7CiAgICAgIHRoaXMuJGVtaXQoTU9ERUxfRVZFTlRfTkFNRSwgbmV3VmFsdWUpOwogICAgfQogIH0pLCBfZGVmaW5lUHJvcGVydHkoX3dhdGNoLCAidG9hc3RlciIsIGZ1bmN0aW9uIHRvYXN0ZXIoKSB7CiAgICAvLyBJZiB0b2FzdGVyIHRhcmdldCBjaGFuZ2VkLCBtYWtlIHN1cmUgdG9hc3RlciBleGlzdHMKICAgIHRoaXMuJG5leHRUaWNrKHRoaXMuZW5zdXJlVG9hc3Rlcik7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfd2F0Y2gsICJzdGF0aWMiLCBmdW5jdGlvbiBfc3RhdGljKG5ld1ZhbHVlKSB7CiAgICAvLyBJZiBzdGF0aWMgY2hhbmdlcyB0byB0cnVlLCBhbmQgdGhlIHRvYXN0IGlzIHNob3dpbmcsCiAgICAvLyBlbnN1cmUgdGhlIHRvYXN0ZXIgdGFyZ2V0IGV4aXN0cwogICAgaWYgKG5ld1ZhbHVlICYmIHRoaXMubG9jYWxTaG93KSB7CiAgICAgIHRoaXMuZW5zdXJlVG9hc3RlcigpOwogICAgfQogIH0pLCBfd2F0Y2gpLAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvLyBDcmVhdGUgcHJpdmF0ZSBub24tcmVhY3RpdmUgcHJvcHMKICAgIHRoaXMuJF9kaXNtaXNzVGltZXIgPSBudWxsOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy5pc01vdW50ZWQgPSB0cnVlOwogICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICBpZiAoX3RoaXNbTU9ERUxfUFJPUF9OQU1FXSkgewogICAgICAgIHJlcXVlc3RBRihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpcy5zaG93KCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOyAvLyBMaXN0ZW4gZm9yIGdsb2JhbCAkcm9vdCBzaG93IGV2ZW50cwoKICAgIHRoaXMubGlzdGVuT25Sb290KGdldFJvb3RBY3Rpb25FdmVudE5hbWUoTkFNRV9UT0FTVCwgRVZFTlRfTkFNRV9TSE9XKSwgZnVuY3Rpb24gKGlkKSB7CiAgICAgIGlmIChpZCA9PT0gX3RoaXMuc2FmZUlkKCkpIHsKICAgICAgICBfdGhpcy5zaG93KCk7CiAgICAgIH0KICAgIH0pOyAvLyBMaXN0ZW4gZm9yIGdsb2JhbCAkcm9vdCBoaWRlIGV2ZW50cwoKICAgIHRoaXMubGlzdGVuT25Sb290KGdldFJvb3RBY3Rpb25FdmVudE5hbWUoTkFNRV9UT0FTVCwgRVZFTlRfTkFNRV9ISURFKSwgZnVuY3Rpb24gKGlkKSB7CiAgICAgIGlmICghaWQgfHwgaWQgPT09IF90aGlzLnNhZmVJZCgpKSB7CiAgICAgICAgX3RoaXMuaGlkZSgpOwogICAgICB9CiAgICB9KTsgLy8gTWFrZSBzdXJlIHdlIGhpZGUgd2hlbiB0b2FzdGVyIGlzIGRlc3Ryb3llZAoKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBkaWZmaWN1bHQgdG8gdGVzdCAqLwoKICAgIHRoaXMubGlzdGVuT25Sb290KGdldFJvb3RFdmVudE5hbWUoTkFNRV9UT0FTVEVSLCBFVkVOVF9OQU1FX0RFU1RST1lFRCksIGZ1bmN0aW9uICh0b2FzdGVyKSB7CiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICAgIGlmICh0b2FzdGVyID09PSBfdGhpcy5jb21wdXRlZFRvYXN0ZXIpIHsKICAgICAgICBfdGhpcy5oaWRlKCk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIHRoaXMuY2xlYXJEaXNtaXNzVGltZXIoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmxvY2FsU2hvdykgewogICAgICAgIHRoaXMuZW5zdXJlVG9hc3RlcigpOwogICAgICAgIHZhciBzaG93RXZ0ID0gdGhpcy5idWlsZEV2ZW50KEVWRU5UX05BTUVfU0hPVyk7CiAgICAgICAgdGhpcy5lbWl0RXZlbnQoc2hvd0V2dCk7CiAgICAgICAgdGhpcy5kaXNtaXNzU3RhcnRlZCA9IHRoaXMucmVzdW1lRGlzbWlzcyA9IDA7CiAgICAgICAgdGhpcy5vcmRlciA9IERhdGUubm93KCkgKiAodGhpcy5hcHBlbmRUb2FzdCA/IDEgOiAtMSk7CiAgICAgICAgdGhpcy5pc0hpZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMuZG9SZW5kZXIgPSB0cnVlOwogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIFdlIHNob3cgdGhlIHRvYXN0IGFmdGVyIHdlIGhhdmUgcmVuZGVyZWQgdGhlIHBvcnRhbCBhbmQgYi10b2FzdCB3cmFwcGVyCiAgICAgICAgICAvLyBzbyB0aGF0IHNjcmVlbiByZWFkZXJzIHdpbGwgcHJvcGVybHkgYW5ub3VuY2UgdGhlIHRvYXN0CiAgICAgICAgICByZXF1ZXN0QUYoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczIubG9jYWxTaG93ID0gdHJ1ZTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgaGlkZTogZnVuY3Rpb24gaGlkZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAodGhpcy5sb2NhbFNob3cpIHsKICAgICAgICB2YXIgaGlkZUV2dCA9IHRoaXMuYnVpbGRFdmVudChFVkVOVF9OQU1FX0hJREUpOwogICAgICAgIHRoaXMuZW1pdEV2ZW50KGhpZGVFdnQpOwogICAgICAgIHRoaXMuc2V0SG92ZXJIYW5kbGVyKGZhbHNlKTsKICAgICAgICB0aGlzLmRpc21pc3NTdGFydGVkID0gdGhpcy5yZXN1bWVEaXNtaXNzID0gMDsKICAgICAgICB0aGlzLmNsZWFyRGlzbWlzc1RpbWVyKCk7CiAgICAgICAgdGhpcy5pc0hpZGluZyA9IHRydWU7CiAgICAgICAgcmVxdWVzdEFGKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMy5sb2NhbFNob3cgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGJ1aWxkRXZlbnQ6IGZ1bmN0aW9uIGJ1aWxkRXZlbnQodHlwZSkgewogICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgICAgIHJldHVybiBuZXcgQnZFdmVudCh0eXBlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoewogICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLAogICAgICAgIHRhcmdldDogdGhpcy4kZWwgfHwgbnVsbCwKICAgICAgICByZWxhdGVkVGFyZ2V0OiBudWxsCiAgICAgIH0sIG9wdGlvbnMpLCB7fSwgewogICAgICAgIHZ1ZVRhcmdldDogdGhpcywKICAgICAgICBjb21wb25lbnRJZDogdGhpcy5zYWZlSWQoKQogICAgICB9KSk7CiAgICB9LAogICAgZW1pdEV2ZW50OiBmdW5jdGlvbiBlbWl0RXZlbnQoYnZFdmVudCkgewogICAgICB2YXIgdHlwZSA9IGJ2RXZlbnQudHlwZTsKICAgICAgdGhpcy5lbWl0T25Sb290KGdldFJvb3RFdmVudE5hbWUoTkFNRV9UT0FTVCwgdHlwZSksIGJ2RXZlbnQpOwogICAgICB0aGlzLiRlbWl0KHR5cGUsIGJ2RXZlbnQpOwogICAgfSwKICAgIGVuc3VyZVRvYXN0ZXI6IGZ1bmN0aW9uIGVuc3VyZVRvYXN0ZXIoKSB7CiAgICAgIGlmICh0aGlzWyJzdGF0aWMiXSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGNvbXB1dGVkVG9hc3RlciA9IHRoaXMuY29tcHV0ZWRUb2FzdGVyOwoKICAgICAgaWYgKCFXb3JtaG9sZS5oYXNUYXJnZXQoY29tcHV0ZWRUb2FzdGVyKSkgewogICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7CiAgICAgICAgdmFyIHRvYXN0ZXIgPSBuZXcgQlRvYXN0ZXIoewogICAgICAgICAgcGFyZW50OiB0aGlzLiRyb290LAogICAgICAgICAgcHJvcHNEYXRhOiB7CiAgICAgICAgICAgIG5hbWU6IGNvbXB1dGVkVG9hc3RlcgogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRvYXN0ZXIuJG1vdW50KGRpdik7CiAgICAgIH0KICAgIH0sCiAgICBzdGFydERpc21pc3NUaW1lcjogZnVuY3Rpb24gc3RhcnREaXNtaXNzVGltZXIoKSB7CiAgICAgIHRoaXMuY2xlYXJEaXNtaXNzVGltZXIoKTsKCiAgICAgIGlmICghdGhpcy5ub0F1dG9IaWRlKSB7CiAgICAgICAgdGhpcy4kX2Rpc21pc3NUaW1lciA9IHNldFRpbWVvdXQodGhpcy5oaWRlLCB0aGlzLnJlc3VtZURpc21pc3MgfHwgdGhpcy5jb21wdXRlZER1cmF0aW9uKTsKICAgICAgICB0aGlzLmRpc21pc3NTdGFydGVkID0gRGF0ZS5ub3coKTsKICAgICAgICB0aGlzLnJlc3VtZURpc21pc3MgPSAwOwogICAgICB9CiAgICB9LAogICAgY2xlYXJEaXNtaXNzVGltZXI6IGZ1bmN0aW9uIGNsZWFyRGlzbWlzc1RpbWVyKCkgewogICAgICBjbGVhclRpbWVvdXQodGhpcy4kX2Rpc21pc3NUaW1lcik7CiAgICAgIHRoaXMuJF9kaXNtaXNzVGltZXIgPSBudWxsOwogICAgfSwKICAgIHNldEhvdmVySGFuZGxlcjogZnVuY3Rpb24gc2V0SG92ZXJIYW5kbGVyKG9uKSB7CiAgICAgIHZhciBlbCA9IHRoaXMuJHJlZnNbJ2ItdG9hc3QnXTsKICAgICAgZXZlbnRPbk9mZihvbiwgZWwsICdtb3VzZWVudGVyJywgdGhpcy5vblBhdXNlLCBFVkVOVF9PUFRJT05TX05PX0NBUFRVUkUpOwogICAgICBldmVudE9uT2ZmKG9uLCBlbCwgJ21vdXNlbGVhdmUnLCB0aGlzLm9uVW5QYXVzZSwgRVZFTlRfT1BUSU9OU19OT19DQVBUVVJFKTsKICAgIH0sCiAgICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkgewogICAgICAvLyBEZXRlcm1pbmUgdGltZSByZW1haW5pbmcsIGFuZCB0aGVuIHBhdXNlIHRpbWVyCiAgICAgIGlmICh0aGlzLm5vQXV0b0hpZGUgfHwgdGhpcy5ub0hvdmVyUGF1c2UgfHwgIXRoaXMuJF9kaXNtaXNzVGltZXIgfHwgdGhpcy5yZXN1bWVEaXNtaXNzKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcGFzc2VkID0gRGF0ZS5ub3coKSAtIHRoaXMuZGlzbWlzc1N0YXJ0ZWQ7CgogICAgICBpZiAocGFzc2VkID4gMCkgewogICAgICAgIHRoaXMuY2xlYXJEaXNtaXNzVGltZXIoKTsKICAgICAgICB0aGlzLnJlc3VtZURpc21pc3MgPSBtYXRoTWF4KHRoaXMuY29tcHV0ZWREdXJhdGlvbiAtIHBhc3NlZCwgTUlOX0RVUkFUSU9OKTsKICAgICAgfQogICAgfSwKICAgIG9uVW5QYXVzZTogZnVuY3Rpb24gb25VblBhdXNlKCkgewogICAgICAvLyBSZXN0YXJ0IHRpbWVyIHdpdGggbWF4IG9mIHRpbWUgcmVtYWluaW5nIG9yIDEgc2Vjb25kCiAgICAgIGlmICh0aGlzLm5vQXV0b0hpZGUgfHwgdGhpcy5ub0hvdmVyUGF1c2UgfHwgIXRoaXMucmVzdW1lRGlzbWlzcykgewogICAgICAgIHRoaXMucmVzdW1lRGlzbWlzcyA9IHRoaXMuZGlzbWlzc1N0YXJ0ZWQgPSAwOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5zdGFydERpc21pc3NUaW1lcigpOwogICAgfSwKICAgIG9uTGlua0NsaWNrOiBmdW5jdGlvbiBvbkxpbmtDbGljaygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7IC8vIFdlIGRlbGF5IHRoZSBjbG9zZSB0byBhbGxvdyB0aW1lIGZvciB0aGUKICAgICAgLy8gYnJvd3NlciB0byBwcm9jZXNzIHRoZSBsaW5rIGNsaWNrCgoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIHJlcXVlc3RBRihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczQuaGlkZSgpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkgewogICAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7CiAgICB9LAogICAgb25BZnRlckVudGVyOiBmdW5jdGlvbiBvbkFmdGVyRW50ZXIoKSB7CiAgICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7CiAgICAgIHZhciBoaWRkZW5FdnQgPSB0aGlzLmJ1aWxkRXZlbnQoRVZFTlRfTkFNRV9TSE9XTik7CiAgICAgIHRoaXMuZW1pdEV2ZW50KGhpZGRlbkV2dCk7CiAgICAgIHRoaXMuc3RhcnREaXNtaXNzVGltZXIoKTsKICAgICAgdGhpcy5zZXRIb3ZlckhhbmRsZXIodHJ1ZSk7CiAgICB9LAogICAgb25CZWZvcmVMZWF2ZTogZnVuY3Rpb24gb25CZWZvcmVMZWF2ZSgpIHsKICAgICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlOwogICAgfSwKICAgIG9uQWZ0ZXJMZWF2ZTogZnVuY3Rpb24gb25BZnRlckxlYXZlKCkgewogICAgICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IGZhbHNlOwogICAgICB0aGlzLm9yZGVyID0gMDsKICAgICAgdGhpcy5yZXN1bWVEaXNtaXNzID0gdGhpcy5kaXNtaXNzU3RhcnRlZCA9IDA7CiAgICAgIHZhciBoaWRkZW5FdnQgPSB0aGlzLmJ1aWxkRXZlbnQoRVZFTlRfTkFNRV9ISURERU4pOwogICAgICB0aGlzLmVtaXRFdmVudChoaWRkZW5FdnQpOwogICAgICB0aGlzLmRvUmVuZGVyID0gZmFsc2U7CiAgICB9LAogICAgLy8gUmVuZGVyIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB0aGUgdG9hc3QKICAgIG1ha2VUb2FzdDogZnVuY3Rpb24gbWFrZVRvYXN0KGgpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICB2YXIgdGl0bGUgPSB0aGlzLnRpdGxlLAogICAgICAgICAgc2xvdFNjb3BlID0gdGhpcy5zbG90U2NvcGU7CiAgICAgIHZhciBsaW5rID0gaXNMaW5rKHRoaXMpOwogICAgICB2YXIgJGhlYWRlckNvbnRlbnQgPSBbXTsKICAgICAgdmFyICR0aXRsZSA9IHRoaXMubm9ybWFsaXplU2xvdChTTE9UX05BTUVfVE9BU1RfVElUTEUsIHNsb3RTY29wZSk7CgogICAgICBpZiAoJHRpdGxlKSB7CiAgICAgICAgJGhlYWRlckNvbnRlbnQucHVzaCgkdGl0bGUpOwogICAgICB9IGVsc2UgaWYgKHRpdGxlKSB7CiAgICAgICAgJGhlYWRlckNvbnRlbnQucHVzaChoKCdzdHJvbmcnLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogJ21yLTInCiAgICAgICAgfSwgdGl0bGUpKTsKICAgICAgfQoKICAgICAgaWYgKCF0aGlzLm5vQ2xvc2VCdXR0b24pIHsKICAgICAgICAkaGVhZGVyQ29udGVudC5wdXNoKGgoQkJ1dHRvbkNsb3NlLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogJ21sLWF1dG8gbWItMScsCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soKSB7CiAgICAgICAgICAgICAgX3RoaXM1LmhpZGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgdmFyICRoZWFkZXIgPSBoKCk7CgogICAgICBpZiAoJGhlYWRlckNvbnRlbnQubGVuZ3RoID4gMCkgewogICAgICAgICRoZWFkZXIgPSBoKCdoZWFkZXInLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogJ3RvYXN0LWhlYWRlcicsCiAgICAgICAgICAiY2xhc3MiOiB0aGlzLmhlYWRlckNsYXNzCiAgICAgICAgfSwgJGhlYWRlckNvbnRlbnQpOwogICAgICB9CgogICAgICB2YXIgJGJvZHkgPSBoKGxpbmsgPyBCTGluayA6ICdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd0b2FzdC1ib2R5JywKICAgICAgICAiY2xhc3MiOiB0aGlzLmJvZHlDbGFzcywKICAgICAgICBwcm9wczogbGluayA/IHBsdWNrUHJvcHMobGlua1Byb3BzLCB0aGlzKSA6IHt9LAogICAgICAgIG9uOiBsaW5rID8gewogICAgICAgICAgY2xpY2s6IHRoaXMub25MaW5rQ2xpY2sKICAgICAgICB9IDoge30KICAgICAgfSwgdGhpcy5ub3JtYWxpemVTbG90KFNMT1RfTkFNRV9ERUZBVUxULCBzbG90U2NvcGUpKTsKICAgICAgcmV0dXJuIGgoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3RvYXN0JywKICAgICAgICAiY2xhc3MiOiB0aGlzLnRvYXN0Q2xhc3MsCiAgICAgICAgYXR0cnM6IHRoaXMuY29tcHV0ZWRBdHRycywKICAgICAgICBrZXk6ICJ0b2FzdC0iLmNvbmNhdCh0aGlzW0NPTVBPTkVOVF9VSURfS0VZXSksCiAgICAgICAgcmVmOiAndG9hc3QnCiAgICAgIH0sIFskaGVhZGVyLCAkYm9keV0pOwogICAgfQogIH0sCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkgewogICAgaWYgKCF0aGlzLmRvUmVuZGVyIHx8ICF0aGlzLmlzTW91bnRlZCkgewogICAgICByZXR1cm4gaCgpOwogICAgfQoKICAgIHZhciBvcmRlciA9IHRoaXMub3JkZXIsCiAgICAgICAgaXNTdGF0aWMgPSB0aGlzWyJzdGF0aWMiXSwKICAgICAgICBpc0hpZGluZyA9IHRoaXMuaXNIaWRpbmcsCiAgICAgICAgaXNTdGF0dXMgPSB0aGlzLmlzU3RhdHVzOwogICAgdmFyIG5hbWUgPSAiYi10b2FzdC0iLmNvbmNhdCh0aGlzW0NPTVBPTkVOVF9VSURfS0VZXSk7CiAgICB2YXIgJHRvYXN0ID0gaCgnZGl2JywgewogICAgICBzdGF0aWNDbGFzczogJ2ItdG9hc3QnLAogICAgICAiY2xhc3MiOiB0aGlzLnRvYXN0Q2xhc3NlcywKICAgICAgYXR0cnM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXNTdGF0aWMgPyB7fSA6IHRoaXMuc2NvcGVkU3R5bGVBdHRycyksIHt9LCB7CiAgICAgICAgaWQ6IHRoaXMuc2FmZUlkKCdfdG9hc3Rfb3V0ZXInKSwKICAgICAgICByb2xlOiBpc0hpZGluZyA/IG51bGwgOiBpc1N0YXR1cyA/ICdzdGF0dXMnIDogJ2FsZXJ0JywKICAgICAgICAnYXJpYS1saXZlJzogaXNIaWRpbmcgPyBudWxsIDogaXNTdGF0dXMgPyAncG9saXRlJyA6ICdhc3NlcnRpdmUnLAogICAgICAgICdhcmlhLWF0b21pYyc6IGlzSGlkaW5nID8gbnVsbCA6ICd0cnVlJwogICAgICB9KSwKICAgICAga2V5OiBuYW1lLAogICAgICByZWY6ICdiLXRvYXN0JwogICAgfSwgW2goQlZUcmFuc2l0aW9uLCB7CiAgICAgIHByb3BzOiB7CiAgICAgICAgbm9GYWRlOiB0aGlzLm5vRmFkZQogICAgICB9LAogICAgICBvbjogdGhpcy50cmFuc2l0aW9uSGFuZGxlcnMKICAgIH0sIFt0aGlzLmxvY2FsU2hvdyA/IHRoaXMubWFrZVRvYXN0KGgpIDogaCgpXSldKTsKICAgIHJldHVybiBoKFBvcnRhbCwgewogICAgICBwcm9wczogewogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgdG86IHRoaXMuY29tcHV0ZWRUb2FzdGVyLAogICAgICAgIG9yZGVyOiBvcmRlciwKICAgICAgICBzbGltOiB0cnVlLAogICAgICAgIGRpc2FibGVkOiBpc1N0YXRpYwogICAgICB9CiAgICB9LCBbJHRvYXN0XSk7CiAgfQp9KTs="},null]}