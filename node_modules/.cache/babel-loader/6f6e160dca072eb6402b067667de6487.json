{"remainingRequest":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js!/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js!/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-sorting.js","dependencies":[{"path":"/Users/zzou/Downloads/backup_sample/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-sorting.js","mtime":1610263603568},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/cache-loader/dist/cjs.js","mtime":1582363961748},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/thread-loader/dist/cjs.js","mtime":1582363962038},{"path":"/Users/zzou/Downloads/backup_sample/node_modules/babel-loader/lib/index.js","mtime":1585275399303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKCnZhciBfcHJvcHMsIF93YXRjaDsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKaW1wb3J0IHsgVnVlIH0gZnJvbSAnLi4vLi4vLi4vdnVlJzsKaW1wb3J0IHsgRVZFTlRfTkFNRV9IRUFEX0NMSUNLRUQsIEVWRU5UX05BTUVfU09SVF9DSEFOR0VELCBNT0RFTF9FVkVOVF9OQU1FX1BSRUZJWCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9ldmVudHMnOwppbXBvcnQgeyBQUk9QX1RZUEVfQVJSQVlfU1RSSU5HLCBQUk9QX1RZUEVfQk9PTEVBTiwgUFJPUF9UWVBFX0ZVTkNUSU9OLCBQUk9QX1RZUEVfT0JKRUNULCBQUk9QX1RZUEVfU1RSSU5HIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL3Byb3BzJzsKaW1wb3J0IHsgYXJyYXlJbmNsdWRlcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2FycmF5JzsKaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNVbmRlZmluZWRPck51bGwgfSBmcm9tICcuLi8uLi8uLi91dGlscy9pbnNwZWN0JzsKaW1wb3J0IHsgbWFrZVByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wcm9wcyc7CmltcG9ydCB7IHN0YWJsZVNvcnQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9zdGFibGUtc29ydCc7CmltcG9ydCB7IHRyaW0gfSBmcm9tICcuLi8uLi8uLi91dGlscy9zdHJpbmcnOwppbXBvcnQgeyBkZWZhdWx0U29ydENvbXBhcmUgfSBmcm9tICcuL2RlZmF1bHQtc29ydC1jb21wYXJlJzsgLy8gLS0tIENvbnN0YW50cyAtLS0KCnZhciBNT0RFTF9QUk9QX05BTUVfU09SVF9CWSA9ICdzb3J0QnknOwp2YXIgTU9ERUxfRVZFTlRfTkFNRV9TT1JUX0JZID0gTU9ERUxfRVZFTlRfTkFNRV9QUkVGSVggKyBNT0RFTF9QUk9QX05BTUVfU09SVF9CWTsKdmFyIE1PREVMX1BST1BfTkFNRV9TT1JUX0RFU0MgPSAnc29ydERlc2MnOwp2YXIgTU9ERUxfRVZFTlRfTkFNRV9TT1JUX0RFU0MgPSBNT0RFTF9FVkVOVF9OQU1FX1BSRUZJWCArIE1PREVMX1BST1BfTkFNRV9TT1JUX0RFU0M7CnZhciBTT1JUX0RJUkVDVElPTl9BU0MgPSAnYXNjJzsKdmFyIFNPUlRfRElSRUNUSU9OX0RFU0MgPSAnZGVzYyc7CnZhciBTT1JUX0RJUkVDVElPTl9MQVNUID0gJ2xhc3QnOwp2YXIgU09SVF9ESVJFQ1RJT05TID0gW1NPUlRfRElSRUNUSU9OX0FTQywgU09SVF9ESVJFQ1RJT05fREVTQywgU09SVF9ESVJFQ1RJT05fTEFTVF07IC8vIC0tLSBQcm9wcyAtLS0KCmV4cG9ydCB2YXIgcHJvcHMgPSAoX3Byb3BzID0gewogIGxhYmVsU29ydEFzYzogbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORywgJ0NsaWNrIHRvIHNvcnQgQXNjZW5kaW5nJyksCiAgbGFiZWxTb3J0Q2xlYXI6IG1ha2VQcm9wKFBST1BfVFlQRV9TVFJJTkcsICdDbGljayB0byBjbGVhciBzb3J0aW5nJyksCiAgbGFiZWxTb3J0RGVzYzogbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORywgJ0NsaWNrIHRvIHNvcnQgRGVzY2VuZGluZycpLAogIG5vRm9vdGVyU29ydGluZzogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICBub0xvY2FsU29ydGluZzogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKSwKICAvLyBBbm90aGVyIHByb3AgdGhhdCBzaG91bGQgaGF2ZSBoYWQgYSBiZXR0ZXIgbmFtZQogIC8vIEl0IHNob3VsZCBiZSBgbm9Tb3J0Q2xlYXJgIChvbiBub24tc29ydGFibGUgaGVhZGVycykKICAvLyBXZSB3aWxsIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBkb2N1bWVudGF0aW9uIGlzIGNsZWFyIG9uIHdoYXQKICAvLyB0aGlzIHByb3AgZG9lcyAoYXMgd2VsbCBhcyBpbiB0aGUgY29kZSBmb3IgZnV0dXJlIHJlZmVyZW5jZSkKICBub1NvcnRSZXNldDogbWFrZVByb3AoUFJPUF9UWVBFX0JPT0xFQU4sIGZhbHNlKQp9LCBfZGVmaW5lUHJvcGVydHkoX3Byb3BzLCBNT0RFTF9QUk9QX05BTUVfU09SVF9CWSwgbWFrZVByb3AoUFJPUF9UWVBFX1NUUklORykpLCBfZGVmaW5lUHJvcGVydHkoX3Byb3BzLCAic29ydENvbXBhcmUiLCBtYWtlUHJvcChQUk9QX1RZUEVfRlVOQ1RJT04pKSwgX2RlZmluZVByb3BlcnR5KF9wcm9wcywgInNvcnRDb21wYXJlTG9jYWxlIiwgbWFrZVByb3AoUFJPUF9UWVBFX0FSUkFZX1NUUklORykpLCBfZGVmaW5lUHJvcGVydHkoX3Byb3BzLCAic29ydENvbXBhcmVPcHRpb25zIiwgbWFrZVByb3AoUFJPUF9UWVBFX09CSkVDVCwgewogIG51bWVyaWM6IHRydWUKfSkpLCBfZGVmaW5lUHJvcGVydHkoX3Byb3BzLCBNT0RFTF9QUk9QX05BTUVfU09SVF9ERVNDLCBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpKSwgX2RlZmluZVByb3BlcnR5KF9wcm9wcywgInNvcnREaXJlY3Rpb24iLCBtYWtlUHJvcChQUk9QX1RZUEVfU1RSSU5HLCBTT1JUX0RJUkVDVElPTl9BU0MsIGZ1bmN0aW9uICh2YWx1ZSkgewogIHJldHVybiBhcnJheUluY2x1ZGVzKFNPUlRfRElSRUNUSU9OUywgdmFsdWUpOwp9KSksIF9kZWZpbmVQcm9wZXJ0eShfcHJvcHMsICJzb3J0SWNvbkxlZnQiLCBtYWtlUHJvcChQUk9QX1RZUEVfQk9PTEVBTiwgZmFsc2UpKSwgX2RlZmluZVByb3BlcnR5KF9wcm9wcywgInNvcnROdWxsTGFzdCIsIG1ha2VQcm9wKFBST1BfVFlQRV9CT09MRUFOLCBmYWxzZSkpLCBfcHJvcHMpOyAvLyAtLS0gTWl4aW4gLS0tCi8vIEB2dWUvY29tcG9uZW50CgpleHBvcnQgdmFyIHNvcnRpbmdNaXhpbiA9IFZ1ZS5leHRlbmQoewogIHByb3BzOiBwcm9wcywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbG9jYWxTb3J0Qnk6IHRoaXNbTU9ERUxfUFJPUF9OQU1FX1NPUlRfQlldIHx8ICcnLAogICAgICBsb2NhbFNvcnREZXNjOiB0aGlzW01PREVMX1BST1BfTkFNRV9TT1JUX0RFU0NdIHx8IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGxvY2FsU29ydGluZzogZnVuY3Rpb24gbG9jYWxTb3J0aW5nKCkgewogICAgICByZXR1cm4gdGhpcy5oYXNQcm92aWRlciA/ICEhdGhpcy5ub1Byb3ZpZGVyU29ydGluZyA6ICF0aGlzLm5vTG9jYWxTb3J0aW5nOwogICAgfSwKICAgIGlzU29ydGFibGU6IGZ1bmN0aW9uIGlzU29ydGFibGUoKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkRmllbGRzLnNvbWUoZnVuY3Rpb24gKGYpIHsKICAgICAgICByZXR1cm4gZi5zb3J0YWJsZTsKICAgICAgfSk7CiAgICB9LAogICAgLy8gU29ydHMgdGhlIGZpbHRlcmVkIGl0ZW1zIGFuZCByZXR1cm5zIGEgbmV3IGFycmF5IG9mIHRoZSBzb3J0ZWQgaXRlbXMKICAgIC8vIFdoZW4gbm90IHNvcnRlZCwgdGhlIG9yaWdpbmFsIGl0ZW1zIGFycmF5IHdpbGwgYmUgcmV0dXJuZWQKICAgIHNvcnRlZEl0ZW1zOiBmdW5jdGlvbiBzb3J0ZWRJdGVtcygpIHsKICAgICAgdmFyIHNvcnRCeSA9IHRoaXMubG9jYWxTb3J0QnksCiAgICAgICAgICBzb3J0RGVzYyA9IHRoaXMubG9jYWxTb3J0RGVzYywKICAgICAgICAgIGxvY2FsZSA9IHRoaXMuc29ydENvbXBhcmVMb2NhbGUsCiAgICAgICAgICBudWxsTGFzdCA9IHRoaXMuc29ydE51bGxMYXN0LAogICAgICAgICAgc29ydENvbXBhcmUgPSB0aGlzLnNvcnRDb21wYXJlLAogICAgICAgICAgbG9jYWxTb3J0aW5nID0gdGhpcy5sb2NhbFNvcnRpbmc7CiAgICAgIHZhciBpdGVtcyA9ICh0aGlzLmZpbHRlcmVkSXRlbXMgfHwgdGhpcy5sb2NhbEl0ZW1zIHx8IFtdKS5zbGljZSgpOwoKICAgICAgdmFyIGxvY2FsZU9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuc29ydENvbXBhcmVPcHRpb25zKSwge30sIHsKICAgICAgICB1c2FnZTogJ3NvcnQnCiAgICAgIH0pOwoKICAgICAgaWYgKHNvcnRCeSAmJiBsb2NhbFNvcnRpbmcpIHsKICAgICAgICB2YXIgZmllbGQgPSB0aGlzLmNvbXB1dGVkRmllbGRzT2JqW3NvcnRCeV0gfHwge307CiAgICAgICAgdmFyIHNvcnRCeUZvcm1hdHRlZCA9IGZpZWxkLnNvcnRCeUZvcm1hdHRlZDsKICAgICAgICB2YXIgZm9ybWF0dGVyID0gaXNGdW5jdGlvbihzb3J0QnlGb3JtYXR0ZWQpID8KICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgICAgIHNvcnRCeUZvcm1hdHRlZCA6IHNvcnRCeUZvcm1hdHRlZCA/IHRoaXMuZ2V0RmllbGRGb3JtYXR0ZXIoc29ydEJ5KSA6IHVuZGVmaW5lZDsgLy8gYHN0YWJsZVNvcnRgIHJldHVybnMgYSBuZXcgYXJyYXksIGFuZCBsZWF2ZXMgdGhlIG9yaWdpbmFsIGFycmF5IGludGFjdAoKICAgICAgICByZXR1cm4gc3RhYmxlU29ydChpdGVtcywgZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsOyAvLyBDYWxsIHVzZXIgcHJvdmlkZWQgYHNvcnRDb21wYXJlYCByb3V0aW5lIGZpcnN0CgogICAgICAgICAgaWYgKGlzRnVuY3Rpb24oc29ydENvbXBhcmUpKSB7CiAgICAgICAgICAgIC8vIFRPRE86CiAgICAgICAgICAgIC8vICAgQ2hhbmdlIHRoZSBgc29ydENvbXBhcmVgIHNpZ25hdHVyZSB0byB0aGUgb25lIG9mIGBkZWZhdWx0U29ydENvbXBhcmVgCiAgICAgICAgICAgIC8vICAgd2l0aCB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIGJ1bXAKICAgICAgICAgICAgcmVzdWx0ID0gc29ydENvbXBhcmUoYSwgYiwgc29ydEJ5LCBzb3J0RGVzYywgZm9ybWF0dGVyLCBsb2NhbGVPcHRpb25zLCBsb2NhbGUpOwogICAgICAgICAgfSAvLyBGYWxsYmFjayB0byBidWlsdC1pbiBgZGVmYXVsdFNvcnRDb21wYXJlYCBpZiBgc29ydENvbXBhcmVgCiAgICAgICAgICAvLyBpcyBub3QgZGVmaW5lZCBvciByZXR1cm5zIGBudWxsYC9gZmFsc2VgCgoKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZE9yTnVsbChyZXN1bHQpIHx8IHJlc3VsdCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgcmVzdWx0ID0gZGVmYXVsdFNvcnRDb21wYXJlKGEsIGIsIHsKICAgICAgICAgICAgICBzb3J0Qnk6IHNvcnRCeSwKICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlciwKICAgICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSwKICAgICAgICAgICAgICBsb2NhbGVPcHRpb25zOiBsb2NhbGVPcHRpb25zLAogICAgICAgICAgICAgIG51bGxMYXN0OiBudWxsTGFzdAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gLy8gTmVnYXRlIHJlc3VsdCBpZiBzb3J0aW5nIGluIGRlc2NlbmRpbmcgb3JkZXIKCgogICAgICAgICAgcmV0dXJuIChyZXN1bHQgfHwgMCkgKiAoc29ydERlc2MgPyAtMSA6IDEpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gaXRlbXM7CiAgICB9CiAgfSwKICB3YXRjaDogKF93YXRjaCA9IHsKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBwYWluIGluIHRoZSBidXR0IHRvIHRlc3QgKi8KICAgIGlzU29ydGFibGU6IGZ1bmN0aW9uIGlzU29ydGFibGUobmV3VmFsdWUpIHsKICAgICAgaWYgKG5ld1ZhbHVlKSB7CiAgICAgICAgaWYgKHRoaXMuaXNTb3J0YWJsZSkgewogICAgICAgICAgdGhpcy4kb24oRVZFTlRfTkFNRV9IRUFEX0NMSUNLRUQsIHRoaXMuaGFuZGxlU29ydCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG9mZihFVkVOVF9OQU1FX0hFQURfQ0xJQ0tFRCwgdGhpcy5oYW5kbGVTb3J0KTsKICAgICAgfQogICAgfQogIH0sIF9kZWZpbmVQcm9wZXJ0eShfd2F0Y2gsIE1PREVMX1BST1BfTkFNRV9TT1JUX0RFU0MsIGZ1bmN0aW9uIChuZXdWYWx1ZSkgewogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgIGlmIChuZXdWYWx1ZSA9PT0gdGhpcy5sb2NhbFNvcnREZXNjKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB0aGlzLmxvY2FsU29ydERlc2MgPSBuZXdWYWx1ZSB8fCBmYWxzZTsKICB9KSwgX2RlZmluZVByb3BlcnR5KF93YXRjaCwgTU9ERUxfUFJPUF9OQU1FX1NPUlRfQlksIGZ1bmN0aW9uIChuZXdWYWx1ZSkgewogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgIGlmIChuZXdWYWx1ZSA9PT0gdGhpcy5sb2NhbFNvcnRCeSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5sb2NhbFNvcnRCeSA9IG5ld1ZhbHVlIHx8ICcnOwogIH0pLCBfZGVmaW5lUHJvcGVydHkoX3dhdGNoLCAibG9jYWxTb3J0RGVzYyIsIGZ1bmN0aW9uIGxvY2FsU29ydERlc2MobmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAvLyBFbWl0IHVwZGF0ZSB0byBzb3J0LWRlc2Muc3luYwogICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkgewogICAgICB0aGlzLiRlbWl0KE1PREVMX0VWRU5UX05BTUVfU09SVF9ERVNDLCBuZXdWYWx1ZSk7CiAgICB9CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfd2F0Y2gsICJsb2NhbFNvcnRCeSIsIGZ1bmN0aW9uIGxvY2FsU29ydEJ5KG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkgewogICAgICB0aGlzLiRlbWl0KE1PREVMX0VWRU5UX05BTUVfU09SVF9CWSwgbmV3VmFsdWUpOwogICAgfQogIH0pLCBfd2F0Y2gpLAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBpZiAodGhpcy5pc1NvcnRhYmxlKSB7CiAgICAgIHRoaXMuJG9uKEVWRU5UX05BTUVfSEVBRF9DTElDS0VELCB0aGlzLmhhbmRsZVNvcnQpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8gSGFuZGxlcnMKICAgIC8vIE5lZWQgdG8gbW92ZSBmcm9tIHRoZWFkLW1peGluCiAgICBoYW5kbGVTb3J0OiBmdW5jdGlvbiBoYW5kbGVTb3J0KGtleSwgZmllbGQsIGV2ZW50LCBpc0Zvb3QpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5pc1NvcnRhYmxlKSB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChpc0Zvb3QgJiYgdGhpcy5ub0Zvb3RlclNvcnRpbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gVE9ETzogbWFrZSB0aGlzIHRyaS1zdGF0ZSBzb3J0aW5nCiAgICAgIC8vIGN5Y2xlIGRlc2MgPT4gYXNjID0+IG5vbmUgPT4gZGVzYyA9PiAuLi4KCgogICAgICB2YXIgc29ydENoYW5nZWQgPSBmYWxzZTsKCiAgICAgIHZhciB0b2dnbGVMb2NhbFNvcnREZXNjID0gZnVuY3Rpb24gdG9nZ2xlTG9jYWxTb3J0RGVzYygpIHsKICAgICAgICB2YXIgc29ydERpcmVjdGlvbiA9IGZpZWxkLnNvcnREaXJlY3Rpb24gfHwgX3RoaXMuc29ydERpcmVjdGlvbjsKCiAgICAgICAgaWYgKHNvcnREaXJlY3Rpb24gPT09IFNPUlRfRElSRUNUSU9OX0FTQykgewogICAgICAgICAgX3RoaXMubG9jYWxTb3J0RGVzYyA9IGZhbHNlOwogICAgICAgIH0gZWxzZSBpZiAoc29ydERpcmVjdGlvbiA9PT0gU09SVF9ESVJFQ1RJT05fREVTQykgewogICAgICAgICAgX3RoaXMubG9jYWxTb3J0RGVzYyA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsvLyBzb3J0RGlyZWN0aW9uID09PSAnbGFzdCcKICAgICAgICAgIC8vIExlYXZlIGF0IGxhc3Qgc29ydCBkaXJlY3Rpb24gZnJvbSBwcmV2aW91cyBjb2x1bW4KICAgICAgICB9CiAgICAgIH07CgogICAgICBpZiAoZmllbGQuc29ydGFibGUpIHsKICAgICAgICB2YXIgc29ydEtleSA9ICF0aGlzLmxvY2FsU29ydGluZyAmJiBmaWVsZC5zb3J0S2V5ID8gZmllbGQuc29ydEtleSA6IGtleTsKCiAgICAgICAgaWYgKHRoaXMubG9jYWxTb3J0QnkgPT09IHNvcnRLZXkpIHsKICAgICAgICAgIC8vIENoYW5nZSBzb3J0aW5nIGRpcmVjdGlvbiBvbiBjdXJyZW50IGNvbHVtbgogICAgICAgICAgdGhpcy5sb2NhbFNvcnREZXNjID0gIXRoaXMubG9jYWxTb3J0RGVzYzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gU3RhcnQgc29ydGluZyB0aGlzIGNvbHVtbiBhc2NlbmRpbmcKICAgICAgICAgIHRoaXMubG9jYWxTb3J0QnkgPSBzb3J0S2V5OyAvLyB0aGlzLmxvY2FsU29ydERlc2MgPSBmYWxzZQoKICAgICAgICAgIHRvZ2dsZUxvY2FsU29ydERlc2MoKTsKICAgICAgICB9CgogICAgICAgIHNvcnRDaGFuZ2VkID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmxvY2FsU29ydEJ5ICYmICF0aGlzLm5vU29ydFJlc2V0KSB7CiAgICAgICAgdGhpcy5sb2NhbFNvcnRCeSA9ICcnOwogICAgICAgIHRvZ2dsZUxvY2FsU29ydERlc2MoKTsKICAgICAgICBzb3J0Q2hhbmdlZCA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChzb3J0Q2hhbmdlZCkgewogICAgICAgIC8vIFNvcnRpbmcgcGFyYW1ldGVycyBjaGFuZ2VkCiAgICAgICAgdGhpcy4kZW1pdChFVkVOVF9OQU1FX1NPUlRfQ0hBTkdFRCwgdGhpcy5jb250ZXh0KTsKICAgICAgfQogICAgfSwKICAgIC8vIG1ldGhvZHMgdG8gY29tcHV0ZSBjbGFzc2VzIGFuZCBhdHRycyBmb3IgdGhlYWQ+dGggY2VsbHMKICAgIHNvcnRUaGVhZFRoQ2xhc3NlczogZnVuY3Rpb24gc29ydFRoZWFkVGhDbGFzc2VzKGtleSwgZmllbGQsIGlzRm9vdCkgewogICAgICByZXR1cm4gewogICAgICAgIC8vIElmIHNvcnRhYmxlIGFuZCBzb3J0SWNvbkxlZnQgYXJlIHRydWUsIHRoZW4gcGxhY2Ugc29ydCBpY29uIG9uIHRoZSBsZWZ0CiAgICAgICAgJ2ItdGFibGUtc29ydC1pY29uLWxlZnQnOiBmaWVsZC5zb3J0YWJsZSAmJiB0aGlzLnNvcnRJY29uTGVmdCAmJiAhKGlzRm9vdCAmJiB0aGlzLm5vRm9vdGVyU29ydGluZykKICAgICAgfTsKICAgIH0sCiAgICBzb3J0VGhlYWRUaEF0dHJzOiBmdW5jdGlvbiBzb3J0VGhlYWRUaEF0dHJzKGtleSwgZmllbGQsIGlzRm9vdCkgewogICAgICBpZiAoIXRoaXMuaXNTb3J0YWJsZSB8fCBpc0Zvb3QgJiYgdGhpcy5ub0Zvb3RlclNvcnRpbmcpIHsKICAgICAgICAvLyBObyBhdHRyaWJ1dGVzIGlmIG5vdCBhIHNvcnRhYmxlIHRhYmxlCiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CgogICAgICB2YXIgc29ydGFibGUgPSBmaWVsZC5zb3J0YWJsZTsgLy8gQXNzZW1ibGUgdGhlIGFyaWEtc29ydCBhdHRyaWJ1dGUgdmFsdWUKCiAgICAgIHZhciBhcmlhU29ydCA9IHNvcnRhYmxlICYmIHRoaXMubG9jYWxTb3J0QnkgPT09IGtleSA/IHRoaXMubG9jYWxTb3J0RGVzYyA/ICdkZXNjZW5kaW5nJyA6ICdhc2NlbmRpbmcnIDogc29ydGFibGUgPyAnbm9uZScgOiBudWxsOyAvLyBSZXR1cm4gdGhlIGF0dHJpYnV0ZQoKICAgICAgcmV0dXJuIHsKICAgICAgICAnYXJpYS1zb3J0JzogYXJpYVNvcnQKICAgICAgfTsKICAgIH0sCiAgICBzb3J0VGhlYWRUaExhYmVsOiBmdW5jdGlvbiBzb3J0VGhlYWRUaExhYmVsKGtleSwgZmllbGQsIGlzRm9vdCkgewogICAgICAvLyBBIGxhYmVsIHRvIGJlIHBsYWNlZCBpbiBhbiBgLnNyLW9ubHlgIGVsZW1lbnQgaW4gdGhlIGhlYWRlciBjZWxsCiAgICAgIGlmICghdGhpcy5pc1NvcnRhYmxlIHx8IGlzRm9vdCAmJiB0aGlzLm5vRm9vdGVyU29ydGluZykgewogICAgICAgIC8vIE5vIGxhYmVsIGlmIG5vdCBhIHNvcnRhYmxlIHRhYmxlCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBzb3J0YWJsZSA9IGZpZWxkLnNvcnRhYmxlOyAvLyBUaGUgY29ycmVjdG5lc3Mgb2YgdGhlc2UgbGFiZWxzIGlzIHZlcnkgaW1wb3J0YW50IGZvciBzY3JlZW4tcmVhZGVyIHVzZXJzLgoKICAgICAgdmFyIGxhYmVsU29ydGluZyA9ICcnOwoKICAgICAgaWYgKHNvcnRhYmxlKSB7CiAgICAgICAgaWYgKHRoaXMubG9jYWxTb3J0QnkgPT09IGtleSkgewogICAgICAgICAgLy8gY3VycmVudGx5IHNvcnRlZCBzb3J0YWJsZSBjb2x1bW4uCiAgICAgICAgICBsYWJlbFNvcnRpbmcgPSB0aGlzLmxvY2FsU29ydERlc2MgPyB0aGlzLmxhYmVsU29ydEFzYyA6IHRoaXMubGFiZWxTb3J0RGVzYzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gTm90IGN1cnJlbnRseSBzb3J0ZWQgc29ydGFibGUgY29sdW1uLgogICAgICAgICAgLy8gTm90IHVzaW5nIG5lc3RlZCB0ZXJuYXJ5J3MgaGVyZSBmb3IgY2xhcml0eS9yZWFkYWJpbGl0eQogICAgICAgICAgLy8gRGVmYXVsdCBmb3IgYXJpYUxhYmVsCiAgICAgICAgICBsYWJlbFNvcnRpbmcgPSB0aGlzLmxvY2FsU29ydERlc2MgPyB0aGlzLmxhYmVsU29ydERlc2MgOiB0aGlzLmxhYmVsU29ydEFzYzsgLy8gSGFuZGxlIHNvcnREaXJlY3Rpb24gc2V0dGluZwoKICAgICAgICAgIHZhciBzb3J0RGlyZWN0aW9uID0gdGhpcy5zb3J0RGlyZWN0aW9uIHx8IGZpZWxkLnNvcnREaXJlY3Rpb247CgogICAgICAgICAgaWYgKHNvcnREaXJlY3Rpb24gPT09IFNPUlRfRElSRUNUSU9OX0FTQykgewogICAgICAgICAgICBsYWJlbFNvcnRpbmcgPSB0aGlzLmxhYmVsU29ydEFzYzsKICAgICAgICAgIH0gZWxzZSBpZiAoc29ydERpcmVjdGlvbiA9PT0gU09SVF9ESVJFQ1RJT05fREVTQykgewogICAgICAgICAgICBsYWJlbFNvcnRpbmcgPSB0aGlzLmxhYmVsU29ydERlc2M7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKCF0aGlzLm5vU29ydFJlc2V0KSB7CiAgICAgICAgLy8gTm9uIHNvcnRhYmxlIGNvbHVtbgogICAgICAgIGxhYmVsU29ydGluZyA9IHRoaXMubG9jYWxTb3J0QnkgPyB0aGlzLmxhYmVsU29ydENsZWFyIDogJyc7CiAgICAgIH0gLy8gUmV0dXJuIHRoZSBzci1vbmx5IHNvcnQgbGFiZWwgb3IgbnVsbCBpZiBubyBsYWJlbAoKCiAgICAgIHJldHVybiB0cmltKGxhYmVsU29ydGluZykgfHwgbnVsbDsKICAgIH0KICB9Cn0pOw=="},null]}