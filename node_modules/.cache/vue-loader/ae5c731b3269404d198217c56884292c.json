{"remainingRequest":"/Users/zzou/Documents/project/yoon/doit/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zzou/Documents/project/yoon/doit/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zzou/Documents/project/yoon/doit/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zzou/Documents/project/yoon/doit/src/layout/main/components/Navbar.vue?vue&type=template&id=6f8899ef&","dependencies":[{"path":"/Users/zzou/Documents/project/yoon/doit/src/layout/main/components/Navbar.vue","mtime":1619105253000},{"path":"/Users/zzou/Documents/project/yoon/doit/node_modules/cache-loader/dist/cjs.js","mtime":1620737710586},{"path":"/Users/zzou/Documents/project/yoon/doit/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620737714077},{"path":"/Users/zzou/Documents/project/yoon/doit/node_modules/cache-loader/dist/cjs.js","mtime":1620737710586},{"path":"/Users/zzou/Documents/project/yoon/doit/node_modules/vue-loader/lib/index.js","mtime":1620737714076}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}